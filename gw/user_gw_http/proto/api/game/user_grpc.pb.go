// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/protos/game/user.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_AddUserChoice_FullMethodName                       = "/game.UserService/AddUserChoice"
	UserService_GetUserChoicesByUserId_FullMethodName              = "/game.UserService/GetUserChoicesByUserId"
	UserService_GetUserChoicesByUserIdAndTimeRange_FullMethodName  = "/game.UserService/GetUserChoicesByUserIdAndTimeRange"
	UserService_GetUserChoicesByGameIdAndPagination_FullMethodName = "/game.UserService/GetUserChoicesByGameIdAndPagination"
	UserService_GetAllUserGames_FullMethodName                     = "/game.UserService/GetAllUserGames"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	AddUserChoice(ctx context.Context, in *AddUserChoiceRequest, opts ...grpc.CallOption) (*UserChoice, error)
	GetUserChoicesByUserId(ctx context.Context, in *GetUserChoicesByUserIdRequest, opts ...grpc.CallOption) (*UserChoices, error)
	GetUserChoicesByUserIdAndTimeRange(ctx context.Context, in *GetUserChoicesByUserIdAndTimeRangeRequest, opts ...grpc.CallOption) (*UserChoices, error)
	GetUserChoicesByGameIdAndPagination(ctx context.Context, in *GetUserChoicesByGameIdRequest, opts ...grpc.CallOption) (*UserChoices, error)
	GetAllUserGames(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*GameIds, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) AddUserChoice(ctx context.Context, in *AddUserChoiceRequest, opts ...grpc.CallOption) (*UserChoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserChoice)
	err := c.cc.Invoke(ctx, UserService_AddUserChoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserChoicesByUserId(ctx context.Context, in *GetUserChoicesByUserIdRequest, opts ...grpc.CallOption) (*UserChoices, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserChoices)
	err := c.cc.Invoke(ctx, UserService_GetUserChoicesByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserChoicesByUserIdAndTimeRange(ctx context.Context, in *GetUserChoicesByUserIdAndTimeRangeRequest, opts ...grpc.CallOption) (*UserChoices, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserChoices)
	err := c.cc.Invoke(ctx, UserService_GetUserChoicesByUserIdAndTimeRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserChoicesByGameIdAndPagination(ctx context.Context, in *GetUserChoicesByGameIdRequest, opts ...grpc.CallOption) (*UserChoices, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserChoices)
	err := c.cc.Invoke(ctx, UserService_GetUserChoicesByGameIdAndPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllUserGames(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*GameIds, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameIds)
	err := c.cc.Invoke(ctx, UserService_GetAllUserGames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	AddUserChoice(context.Context, *AddUserChoiceRequest) (*UserChoice, error)
	GetUserChoicesByUserId(context.Context, *GetUserChoicesByUserIdRequest) (*UserChoices, error)
	GetUserChoicesByUserIdAndTimeRange(context.Context, *GetUserChoicesByUserIdAndTimeRangeRequest) (*UserChoices, error)
	GetUserChoicesByGameIdAndPagination(context.Context, *GetUserChoicesByGameIdRequest) (*UserChoices, error)
	GetAllUserGames(context.Context, *UserId) (*GameIds, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) AddUserChoice(context.Context, *AddUserChoiceRequest) (*UserChoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserChoice not implemented")
}
func (UnimplementedUserServiceServer) GetUserChoicesByUserId(context.Context, *GetUserChoicesByUserIdRequest) (*UserChoices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChoicesByUserId not implemented")
}
func (UnimplementedUserServiceServer) GetUserChoicesByUserIdAndTimeRange(context.Context, *GetUserChoicesByUserIdAndTimeRangeRequest) (*UserChoices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChoicesByUserIdAndTimeRange not implemented")
}
func (UnimplementedUserServiceServer) GetUserChoicesByGameIdAndPagination(context.Context, *GetUserChoicesByGameIdRequest) (*UserChoices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChoicesByGameIdAndPagination not implemented")
}
func (UnimplementedUserServiceServer) GetAllUserGames(context.Context, *UserId) (*GameIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserGames not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_AddUserChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserChoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUserChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddUserChoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUserChoice(ctx, req.(*AddUserChoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserChoicesByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserChoicesByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserChoicesByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserChoicesByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserChoicesByUserId(ctx, req.(*GetUserChoicesByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserChoicesByUserIdAndTimeRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserChoicesByUserIdAndTimeRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserChoicesByUserIdAndTimeRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserChoicesByUserIdAndTimeRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserChoicesByUserIdAndTimeRange(ctx, req.(*GetUserChoicesByUserIdAndTimeRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserChoicesByGameIdAndPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserChoicesByGameIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserChoicesByGameIdAndPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserChoicesByGameIdAndPagination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserChoicesByGameIdAndPagination(ctx, req.(*GetUserChoicesByGameIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllUserGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllUserGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllUserGames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllUserGames(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUserChoice",
			Handler:    _UserService_AddUserChoice_Handler,
		},
		{
			MethodName: "GetUserChoicesByUserId",
			Handler:    _UserService_GetUserChoicesByUserId_Handler,
		},
		{
			MethodName: "GetUserChoicesByUserIdAndTimeRange",
			Handler:    _UserService_GetUserChoicesByUserIdAndTimeRange_Handler,
		},
		{
			MethodName: "GetUserChoicesByGameIdAndPagination",
			Handler:    _UserService_GetUserChoicesByGameIdAndPagination_Handler,
		},
		{
			MethodName: "GetAllUserGames",
			Handler:    _UserService_GetAllUserGames_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/protos/game/user.proto",
}
