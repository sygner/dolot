// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.3
// source: proto/protos/game/game.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetUserGamesByTimesAndGameTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameType  *string `protobuf:"bytes,1,opt,name=game_type,json=gameType,proto3,oneof" json:"game_type,omitempty"`
	UserId    int32   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StartTime string  `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   string  `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *GetUserGamesByTimesAndGameTypesRequest) Reset() {
	*x = GetUserGamesByTimesAndGameTypesRequest{}
	mi := &file_proto_protos_game_game_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserGamesByTimesAndGameTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserGamesByTimesAndGameTypesRequest) ProtoMessage() {}

func (x *GetUserGamesByTimesAndGameTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_game_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserGamesByTimesAndGameTypesRequest.ProtoReflect.Descriptor instead.
func (*GetUserGamesByTimesAndGameTypesRequest) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_game_proto_rawDescGZIP(), []int{0}
}

func (x *GetUserGamesByTimesAndGameTypesRequest) GetGameType() string {
	if x != nil && x.GameType != nil {
		return *x.GameType
	}
	return ""
}

func (x *GetUserGamesByTimesAndGameTypesRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserGamesByTimesAndGameTypesRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *GetUserGamesByTimesAndGameTypesRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type UpdateGamePrizeByGameIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId      string  `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Prize       *uint32 `protobuf:"varint,2,opt,name=prize,proto3,oneof" json:"prize,omitempty"`
	AutoCompute bool    `protobuf:"varint,3,opt,name=auto_compute,json=autoCompute,proto3" json:"auto_compute,omitempty"`
}

func (x *UpdateGamePrizeByGameIdRequest) Reset() {
	*x = UpdateGamePrizeByGameIdRequest{}
	mi := &file_proto_protos_game_game_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateGamePrizeByGameIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGamePrizeByGameIdRequest) ProtoMessage() {}

func (x *UpdateGamePrizeByGameIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_game_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGamePrizeByGameIdRequest.ProtoReflect.Descriptor instead.
func (*UpdateGamePrizeByGameIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_game_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateGamePrizeByGameIdRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *UpdateGamePrizeByGameIdRequest) GetPrize() uint32 {
	if x != nil && x.Prize != nil {
		return *x.Prize
	}
	return 0
}

func (x *UpdateGamePrizeByGameIdRequest) GetAutoCompute() bool {
	if x != nil {
		return x.AutoCompute
	}
	return false
}

type GetAllUserChoiceDivisionsByGameIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	GameId string `protobuf:"bytes,2,opt,name=gameId,proto3" json:"gameId,omitempty"`
}

func (x *GetAllUserChoiceDivisionsByGameIdRequest) Reset() {
	*x = GetAllUserChoiceDivisionsByGameIdRequest{}
	mi := &file_proto_protos_game_game_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllUserChoiceDivisionsByGameIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllUserChoiceDivisionsByGameIdRequest) ProtoMessage() {}

func (x *GetAllUserChoiceDivisionsByGameIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_game_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllUserChoiceDivisionsByGameIdRequest.ProtoReflect.Descriptor instead.
func (*GetAllUserChoiceDivisionsByGameIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_game_proto_rawDescGZIP(), []int{2}
}

func (x *GetAllUserChoiceDivisionsByGameIdRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetAllUserChoiceDivisionsByGameIdRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

type GetAllUserPreviousGamesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32       `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetAllUserPreviousGamesRequest) Reset() {
	*x = GetAllUserPreviousGamesRequest{}
	mi := &file_proto_protos_game_game_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllUserPreviousGamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllUserPreviousGamesRequest) ProtoMessage() {}

func (x *GetAllUserPreviousGamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_game_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllUserPreviousGamesRequest.ProtoReflect.Descriptor instead.
func (*GetAllUserPreviousGamesRequest) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_game_proto_rawDescGZIP(), []int{3}
}

func (x *GetAllUserPreviousGamesRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetAllUserPreviousGamesRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetAllUserPreviousGamesByGameTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32       `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	GameType   string      `protobuf:"bytes,3,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
}

func (x *GetAllUserPreviousGamesByGameTypeRequest) Reset() {
	*x = GetAllUserPreviousGamesByGameTypeRequest{}
	mi := &file_proto_protos_game_game_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllUserPreviousGamesByGameTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllUserPreviousGamesByGameTypeRequest) ProtoMessage() {}

func (x *GetAllUserPreviousGamesByGameTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_game_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllUserPreviousGamesByGameTypeRequest.ProtoReflect.Descriptor instead.
func (*GetAllUserPreviousGamesByGameTypeRequest) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_game_proto_rawDescGZIP(), []int{4}
}

func (x *GetAllUserPreviousGamesByGameTypeRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetAllUserPreviousGamesByGameTypeRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetAllUserPreviousGamesByGameTypeRequest) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

type PreviousGames struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Game           *Game           `protobuf:"bytes,1,opt,name=game,proto3" json:"game,omitempty"`
	DivisionResult *DivisionResult `protobuf:"bytes,2,opt,name=division_result,json=divisionResult,proto3" json:"division_result,omitempty"`
}

func (x *PreviousGames) Reset() {
	*x = PreviousGames{}
	mi := &file_proto_protos_game_game_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreviousGames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviousGames) ProtoMessage() {}

func (x *PreviousGames) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_game_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviousGames.ProtoReflect.Descriptor instead.
func (*PreviousGames) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_game_proto_rawDescGZIP(), []int{5}
}

func (x *PreviousGames) GetGame() *Game {
	if x != nil {
		return x.Game
	}
	return nil
}

func (x *PreviousGames) GetDivisionResult() *DivisionResult {
	if x != nil {
		return x.DivisionResult
	}
	return nil
}

type GetAllUserPreviousGamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousGames []*PreviousGames `protobuf:"bytes,1,rep,name=previous_games,json=previousGames,proto3" json:"previous_games,omitempty"`
}

func (x *GetAllUserPreviousGamesResponse) Reset() {
	*x = GetAllUserPreviousGamesResponse{}
	mi := &file_proto_protos_game_game_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllUserPreviousGamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllUserPreviousGamesResponse) ProtoMessage() {}

func (x *GetAllUserPreviousGamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_game_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllUserPreviousGamesResponse.ProtoReflect.Descriptor instead.
func (*GetAllUserPreviousGamesResponse) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_game_proto_rawDescGZIP(), []int{6}
}

func (x *GetAllUserPreviousGamesResponse) GetPreviousGames() []*PreviousGames {
	if x != nil {
		return x.PreviousGames
	}
	return nil
}

type GameTypeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	TypeName    string `protobuf:"bytes,4,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	DayName     string `protobuf:"bytes,5,opt,name=day_name,json=dayName,proto3" json:"day_name,omitempty"`
	PrizeReward int32  `protobuf:"varint,6,opt,name=prize_reward,json=prizeReward,proto3" json:"prize_reward,omitempty"`
	TokenBurn   int32  `protobuf:"varint,7,opt,name=token_burn,json=tokenBurn,proto3" json:"token_burn,omitempty"`
}

func (x *GameTypeDetails) Reset() {
	*x = GameTypeDetails{}
	mi := &file_proto_protos_game_game_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameTypeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameTypeDetails) ProtoMessage() {}

func (x *GameTypeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_game_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameTypeDetails.ProtoReflect.Descriptor instead.
func (*GameTypeDetails) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_game_proto_rawDescGZIP(), []int{7}
}

func (x *GameTypeDetails) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GameTypeDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GameTypeDetails) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GameTypeDetails) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *GameTypeDetails) GetDayName() string {
	if x != nil {
		return x.DayName
	}
	return ""
}

func (x *GameTypeDetails) GetPrizeReward() int32 {
	if x != nil {
		return x.PrizeReward
	}
	return 0
}

func (x *GameTypeDetails) GetTokenBurn() int32 {
	if x != nil {
		return x.TokenBurn
	}
	return 0
}

type ChangeGameDetailCalculationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameType    GameType `protobuf:"varint,1,opt,name=game_type,json=gameType,proto3,enum=game.GameType" json:"game_type,omitempty"`
	DayName     *string  `protobuf:"bytes,2,opt,name=day_name,json=dayName,proto3,oneof" json:"day_name,omitempty"`
	PrizeReward int32    `protobuf:"varint,3,opt,name=prize_reward,json=prizeReward,proto3" json:"prize_reward,omitempty"`
	TokenBurn   int32    `protobuf:"varint,4,opt,name=token_burn,json=tokenBurn,proto3" json:"token_burn,omitempty"`
	AutoCompute bool     `protobuf:"varint,5,opt,name=auto_compute,json=autoCompute,proto3" json:"auto_compute,omitempty"`
}

func (x *ChangeGameDetailCalculationRequest) Reset() {
	*x = ChangeGameDetailCalculationRequest{}
	mi := &file_proto_protos_game_game_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeGameDetailCalculationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeGameDetailCalculationRequest) ProtoMessage() {}

func (x *ChangeGameDetailCalculationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_game_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeGameDetailCalculationRequest.ProtoReflect.Descriptor instead.
func (*ChangeGameDetailCalculationRequest) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_game_proto_rawDescGZIP(), []int{8}
}

func (x *ChangeGameDetailCalculationRequest) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_LOTTO
}

func (x *ChangeGameDetailCalculationRequest) GetDayName() string {
	if x != nil && x.DayName != nil {
		return *x.DayName
	}
	return ""
}

func (x *ChangeGameDetailCalculationRequest) GetPrizeReward() int32 {
	if x != nil {
		return x.PrizeReward
	}
	return 0
}

func (x *ChangeGameDetailCalculationRequest) GetTokenBurn() int32 {
	if x != nil {
		return x.TokenBurn
	}
	return 0
}

func (x *ChangeGameDetailCalculationRequest) GetAutoCompute() bool {
	if x != nil {
		return x.AutoCompute
	}
	return false
}

type GameTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameTypes []*GameTypeDetails `protobuf:"bytes,1,rep,name=game_types,json=gameTypes,proto3" json:"game_types,omitempty"`
}

func (x *GameTypes) Reset() {
	*x = GameTypes{}
	mi := &file_proto_protos_game_game_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameTypes) ProtoMessage() {}

func (x *GameTypes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_game_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameTypes.ProtoReflect.Descriptor instead.
func (*GameTypes) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_game_proto_rawDescGZIP(), []int{9}
}

func (x *GameTypes) GetGameTypes() []*GameTypeDetails {
	if x != nil {
		return x.GameTypes
	}
	return nil
}

type AddResultByGameIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Result string `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AddResultByGameIdRequest) Reset() {
	*x = AddResultByGameIdRequest{}
	mi := &file_proto_protos_game_game_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddResultByGameIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddResultByGameIdRequest) ProtoMessage() {}

func (x *AddResultByGameIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_game_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddResultByGameIdRequest.ProtoReflect.Descriptor instead.
func (*AddResultByGameIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_game_proto_rawDescGZIP(), []int{10}
}

func (x *AddResultByGameIdRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *AddResultByGameIdRequest) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type GetGamesByCreatorIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatorId  int32       `protobuf:"varint,1,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetGamesByCreatorIdRequest) Reset() {
	*x = GetGamesByCreatorIdRequest{}
	mi := &file_proto_protos_game_game_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGamesByCreatorIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGamesByCreatorIdRequest) ProtoMessage() {}

func (x *GetGamesByCreatorIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_game_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGamesByCreatorIdRequest.ProtoReflect.Descriptor instead.
func (*GetGamesByCreatorIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_game_proto_rawDescGZIP(), []int{11}
}

func (x *GetGamesByCreatorIdRequest) GetCreatorId() int32 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *GetGamesByCreatorIdRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type AddGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Name of the game
	GameType    GameType `protobuf:"varint,2,opt,name=game_type,json=gameType,proto3,enum=game.GameType" json:"game_type,omitempty"`
	StartTime   string   `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`        // Start time for the game's drawing window
	EndTime     string   `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`              // End time for the game's drawing window
	CreatorId   int32    `protobuf:"varint,5,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`       // End time for the game's drawing window
	Prize       *uint32  `protobuf:"varint,6,opt,name=prize,proto3,oneof" json:"prize,omitempty"`                          // Prize that Admin Entered
	AutoCompute bool     `protobuf:"varint,7,opt,name=auto_compute,json=autoCompute,proto3" json:"auto_compute,omitempty"` // Auto Compute for Prize
}

func (x *AddGameRequest) Reset() {
	*x = AddGameRequest{}
	mi := &file_proto_protos_game_game_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGameRequest) ProtoMessage() {}

func (x *AddGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_game_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGameRequest.ProtoReflect.Descriptor instead.
func (*AddGameRequest) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_game_proto_rawDescGZIP(), []int{12}
}

func (x *AddGameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddGameRequest) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_LOTTO
}

func (x *AddGameRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *AddGameRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *AddGameRequest) GetCreatorId() int32 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *AddGameRequest) GetPrize() uint32 {
	if x != nil && x.Prize != nil {
		return *x.Prize
	}
	return 0
}

func (x *AddGameRequest) GetAutoCompute() bool {
	if x != nil {
		return x.AutoCompute
	}
	return false
}

type Game struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                              // Unique identifier for the game
	Name             string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                          // Name of the game
	GameType         GameType `protobuf:"varint,3,opt,name=game_type,json=gameType,proto3,enum=game.GameType" json:"game_type,omitempty"`              // Type of game (using enum)
	NumMainNumbers   int32    `protobuf:"varint,4,opt,name=num_main_numbers,json=numMainNumbers,proto3" json:"num_main_numbers,omitempty"`             // Number of main numbers to pick
	NumBonusNumbers  *int32   `protobuf:"varint,5,opt,name=num_bonus_numbers,json=numBonusNumbers,proto3,oneof" json:"num_bonus_numbers,omitempty"`    // Number of bonus numbers
	MainNumberRange  int32    `protobuf:"varint,6,opt,name=main_number_range,json=mainNumberRange,proto3" json:"main_number_range,omitempty"`          // Range of the main numbers
	BonusNumberRange *int32   `protobuf:"varint,7,opt,name=bonus_number_range,json=bonusNumberRange,proto3,oneof" json:"bonus_number_range,omitempty"` // Range of bonus numbers
	StartTime        string   `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                               // Start time for the game's drawing window
	EndTime          string   `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                     // End time for the game's drawing window
	CreatorId        int32    `protobuf:"varint,10,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`                             // ID of the user/admin who created the game
	Result           *string  `protobuf:"bytes,11,opt,name=result,proto3,oneof" json:"result,omitempty"`                                               // Storing the result as a string
	Prize            *uint32  `protobuf:"varint,12,opt,name=prize,proto3,oneof" json:"prize,omitempty"`                                                // Prize that Admin Entered
	AutoCompute      bool     `protobuf:"varint,13,opt,name=auto_compute,json=autoCompute,proto3" json:"auto_compute,omitempty"`                       // Auto Compute for Prize
	CreatedAt        string   `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                              // Timestamp when the game was created
}

func (x *Game) Reset() {
	*x = Game{}
	mi := &file_proto_protos_game_game_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Game) ProtoMessage() {}

func (x *Game) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_game_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Game.ProtoReflect.Descriptor instead.
func (*Game) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_game_proto_rawDescGZIP(), []int{13}
}

func (x *Game) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Game) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Game) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_LOTTO
}

func (x *Game) GetNumMainNumbers() int32 {
	if x != nil {
		return x.NumMainNumbers
	}
	return 0
}

func (x *Game) GetNumBonusNumbers() int32 {
	if x != nil && x.NumBonusNumbers != nil {
		return *x.NumBonusNumbers
	}
	return 0
}

func (x *Game) GetMainNumberRange() int32 {
	if x != nil {
		return x.MainNumberRange
	}
	return 0
}

func (x *Game) GetBonusNumberRange() int32 {
	if x != nil && x.BonusNumberRange != nil {
		return *x.BonusNumberRange
	}
	return 0
}

func (x *Game) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *Game) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *Game) GetCreatorId() int32 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *Game) GetResult() string {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return ""
}

func (x *Game) GetPrize() uint32 {
	if x != nil && x.Prize != nil {
		return *x.Prize
	}
	return 0
}

func (x *Game) GetAutoCompute() bool {
	if x != nil {
		return x.AutoCompute
	}
	return false
}

func (x *Game) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type Games struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Games []*Game `protobuf:"bytes,1,rep,name=games,proto3" json:"games,omitempty"`
	Total *int32  `protobuf:"varint,2,opt,name=total,proto3,oneof" json:"total,omitempty"`
}

func (x *Games) Reset() {
	*x = Games{}
	mi := &file_proto_protos_game_game_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Games) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Games) ProtoMessage() {}

func (x *Games) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_game_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Games.ProtoReflect.Descriptor instead.
func (*Games) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_game_proto_rawDescGZIP(), []int{14}
}

func (x *Games) GetGames() []*Game {
	if x != nil {
		return x.Games
	}
	return nil
}

func (x *Games) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

type DivisionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Division      string  `protobuf:"bytes,1,opt,name=division,proto3" json:"division,omitempty"`
	UserCount     uint32  `protobuf:"varint,2,opt,name=user_count,json=userCount,proto3" json:"user_count,omitempty"`
	DivisionPrize float32 `protobuf:"fixed32,3,opt,name=division_prize,json=divisionPrize,proto3" json:"division_prize,omitempty"`
}

func (x *DivisionDetail) Reset() {
	*x = DivisionDetail{}
	mi := &file_proto_protos_game_game_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DivisionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivisionDetail) ProtoMessage() {}

func (x *DivisionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_game_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivisionDetail.ProtoReflect.Descriptor instead.
func (*DivisionDetail) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_game_proto_rawDescGZIP(), []int{15}
}

func (x *DivisionDetail) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *DivisionDetail) GetUserCount() uint32 {
	if x != nil {
		return x.UserCount
	}
	return 0
}

func (x *DivisionDetail) GetDivisionPrize() float32 {
	if x != nil {
		return x.DivisionPrize
	}
	return 0
}

type GameAndUserChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Game            *Game                       `protobuf:"bytes,1,opt,name=game,proto3" json:"game,omitempty"`
	DivisionResults *DivisionResults            `protobuf:"bytes,2,opt,name=division_results,json=divisionResults,proto3" json:"division_results,omitempty"`
	UserChoices     []*UserChoiceResultFiltered `protobuf:"bytes,3,rep,name=user_choices,json=userChoices,proto3" json:"user_choices,omitempty"`
	TicketUsed      uint32                      `protobuf:"varint,4,opt,name=ticket_used,json=ticketUsed,proto3" json:"ticket_used,omitempty"`
	DivisionDetails []*DivisionDetail           `protobuf:"bytes,5,rep,name=division_details,json=divisionDetails,proto3" json:"division_details,omitempty"`
}

func (x *GameAndUserChoice) Reset() {
	*x = GameAndUserChoice{}
	mi := &file_proto_protos_game_game_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameAndUserChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameAndUserChoice) ProtoMessage() {}

func (x *GameAndUserChoice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_game_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameAndUserChoice.ProtoReflect.Descriptor instead.
func (*GameAndUserChoice) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_game_proto_rawDescGZIP(), []int{16}
}

func (x *GameAndUserChoice) GetGame() *Game {
	if x != nil {
		return x.Game
	}
	return nil
}

func (x *GameAndUserChoice) GetDivisionResults() *DivisionResults {
	if x != nil {
		return x.DivisionResults
	}
	return nil
}

func (x *GameAndUserChoice) GetUserChoices() []*UserChoiceResultFiltered {
	if x != nil {
		return x.UserChoices
	}
	return nil
}

func (x *GameAndUserChoice) GetTicketUsed() uint32 {
	if x != nil {
		return x.TicketUsed
	}
	return 0
}

func (x *GameAndUserChoice) GetDivisionDetails() []*DivisionDetail {
	if x != nil {
		return x.DivisionDetails
	}
	return nil
}

type GamesAndUserChoices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Games []*GameAndUserChoice `protobuf:"bytes,1,rep,name=games,proto3" json:"games,omitempty"`
}

func (x *GamesAndUserChoices) Reset() {
	*x = GamesAndUserChoices{}
	mi := &file_proto_protos_game_game_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GamesAndUserChoices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamesAndUserChoices) ProtoMessage() {}

func (x *GamesAndUserChoices) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_game_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamesAndUserChoices.ProtoReflect.Descriptor instead.
func (*GamesAndUserChoices) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_game_proto_rawDescGZIP(), []int{17}
}

func (x *GamesAndUserChoices) GetGames() []*GameAndUserChoice {
	if x != nil {
		return x.Games
	}
	return nil
}

type UserPrizeUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int32   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	WonPrize float32 `protobuf:"fixed32,2,opt,name=won_prize,json=wonPrize,proto3" json:"won_prize,omitempty"`
}

func (x *UserPrizeUpdate) Reset() {
	*x = UserPrizeUpdate{}
	mi := &file_proto_protos_game_game_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPrizeUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPrizeUpdate) ProtoMessage() {}

func (x *UserPrizeUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_game_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPrizeUpdate.ProtoReflect.Descriptor instead.
func (*UserPrizeUpdate) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_game_proto_rawDescGZIP(), []int{18}
}

func (x *UserPrizeUpdate) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserPrizeUpdate) GetWonPrize() float32 {
	if x != nil {
		return x.WonPrize
	}
	return 0
}

type DivisionUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DivisionName string             `protobuf:"bytes,1,opt,name=division_name,json=divisionName,proto3" json:"division_name,omitempty"`
	Users        []*UserPrizeUpdate `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *DivisionUpdate) Reset() {
	*x = DivisionUpdate{}
	mi := &file_proto_protos_game_game_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DivisionUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivisionUpdate) ProtoMessage() {}

func (x *DivisionUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_game_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivisionUpdate.ProtoReflect.Descriptor instead.
func (*DivisionUpdate) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_game_proto_rawDescGZIP(), []int{19}
}

func (x *DivisionUpdate) GetDivisionName() string {
	if x != nil {
		return x.DivisionName
	}
	return ""
}

func (x *DivisionUpdate) GetUsers() []*UserPrizeUpdate {
	if x != nil {
		return x.Users
	}
	return nil
}

type UpdateUserGameDivisionPrizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DivisionUpdates []*DivisionUpdate `protobuf:"bytes,1,rep,name=division_updates,json=divisionUpdates,proto3" json:"division_updates,omitempty"`
	GameId          string            `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (x *UpdateUserGameDivisionPrizeRequest) Reset() {
	*x = UpdateUserGameDivisionPrizeRequest{}
	mi := &file_proto_protos_game_game_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserGameDivisionPrizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserGameDivisionPrizeRequest) ProtoMessage() {}

func (x *UpdateUserGameDivisionPrizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_game_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserGameDivisionPrizeRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserGameDivisionPrizeRequest) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_game_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateUserGameDivisionPrizeRequest) GetDivisionUpdates() []*DivisionUpdate {
	if x != nil {
		return x.DivisionUpdates
	}
	return nil
}

func (x *UpdateUserGameDivisionPrizeRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

var File_proto_protos_game_game_proto protoreflect.FileDescriptor

var file_proto_protos_game_game_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67,
	0x61, 0x6d, 0x65, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x67, 0x61, 0x6d, 0x65, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xab, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x81, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61,
	0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70,
	0x72, 0x69, 0x7a, 0x65, 0x22, 0x5b, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x22, 0x6b, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x92,
	0x01, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x6e, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x67, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0e, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x5d, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x7a,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x62, 0x75, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x75, 0x72, 0x6e, 0x22, 0xe3, 0x01, 0x0a, 0x22, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x64, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x64, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x69, 0x7a, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75, 0x72, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x09,
	0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22,
	0x4b, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x79, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6d, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf2, 0x01, 0x0a, 0x0e,
	0x41, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x7a,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x70, 0x72, 0x69, 0x7a, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x7a, 0x65,
	0x22, 0xa6, 0x04, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75,
	0x6d, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x31, 0x0a, 0x12, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52,
	0x10, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74,
	0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x22, 0x4e, 0x0a, 0x05, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x72, 0x0a, 0x0e, 0x44, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x22, 0x9a, 0x02,
	0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x67,
	0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x10, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x0f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x10, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0f, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x44, 0x0a, 0x13, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x2d, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0x47, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x77, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x22, 0x62, 0x0a, 0x0e, 0x44, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x7a, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x7e, 0x0a,
	0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x44,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x10, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x0f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x32, 0xb1, 0x0a,
	0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64,
	0x12, 0x0c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x1a, 0x0a,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x41, 0x64, 0x64,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x78, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e,
	0x65, 0x78, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x0b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x2f, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x0c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x1a, 0x0b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x61, 0x6d, 0x65,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x0c,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x1a, 0x0b, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73,
	0x42, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x4a, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x79, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x44, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x10, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x10, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x0b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x0b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0f, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x58, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x2e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x0c, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x4c, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x24, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x72,
	0x69, 0x7a, 0x65, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x6a, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x42,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x2c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x41, 0x6e, 0x64,
	0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x41, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x2e, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65,
	0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_protos_game_game_proto_rawDescOnce sync.Once
	file_proto_protos_game_game_proto_rawDescData = file_proto_protos_game_game_proto_rawDesc
)

func file_proto_protos_game_game_proto_rawDescGZIP() []byte {
	file_proto_protos_game_game_proto_rawDescOnce.Do(func() {
		file_proto_protos_game_game_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_protos_game_game_proto_rawDescData)
	})
	return file_proto_protos_game_game_proto_rawDescData
}

var file_proto_protos_game_game_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_proto_protos_game_game_proto_goTypes = []any{
	(*GetUserGamesByTimesAndGameTypesRequest)(nil),   // 0: game.GetUserGamesByTimesAndGameTypesRequest
	(*UpdateGamePrizeByGameIdRequest)(nil),           // 1: game.UpdateGamePrizeByGameIdRequest
	(*GetAllUserChoiceDivisionsByGameIdRequest)(nil), // 2: game.GetAllUserChoiceDivisionsByGameIdRequest
	(*GetAllUserPreviousGamesRequest)(nil),           // 3: game.GetAllUserPreviousGamesRequest
	(*GetAllUserPreviousGamesByGameTypeRequest)(nil), // 4: game.GetAllUserPreviousGamesByGameTypeRequest
	(*PreviousGames)(nil),                            // 5: game.PreviousGames
	(*GetAllUserPreviousGamesResponse)(nil),          // 6: game.GetAllUserPreviousGamesResponse
	(*GameTypeDetails)(nil),                          // 7: game.GameTypeDetails
	(*ChangeGameDetailCalculationRequest)(nil),       // 8: game.ChangeGameDetailCalculationRequest
	(*GameTypes)(nil),                                // 9: game.GameTypes
	(*AddResultByGameIdRequest)(nil),                 // 10: game.AddResultByGameIdRequest
	(*GetGamesByCreatorIdRequest)(nil),               // 11: game.GetGamesByCreatorIdRequest
	(*AddGameRequest)(nil),                           // 12: game.AddGameRequest
	(*Game)(nil),                                     // 13: game.Game
	(*Games)(nil),                                    // 14: game.Games
	(*DivisionDetail)(nil),                           // 15: game.DivisionDetail
	(*GameAndUserChoice)(nil),                        // 16: game.GameAndUserChoice
	(*GamesAndUserChoices)(nil),                      // 17: game.GamesAndUserChoices
	(*UserPrizeUpdate)(nil),                          // 18: game.UserPrizeUpdate
	(*DivisionUpdate)(nil),                           // 19: game.DivisionUpdate
	(*UpdateUserGameDivisionPrizeRequest)(nil),       // 20: game.UpdateUserGameDivisionPrizeRequest
	(*Pagination)(nil),                               // 21: game.Pagination
	(*DivisionResult)(nil),                           // 22: game.DivisionResult
	(GameType)(0),                                    // 23: game.GameType
	(*DivisionResults)(nil),                          // 24: game.DivisionResults
	(*UserChoiceResultFiltered)(nil),                 // 25: game.UserChoiceResultFiltered
	(*GameId)(nil),                                   // 26: game.GameId
	(*GameTypeRequest)(nil),                          // 27: game.GameTypeRequest
	(*Empty)(nil),                                    // 28: game.Empty
}
var file_proto_protos_game_game_proto_depIdxs = []int32{
	21, // 0: game.GetAllUserPreviousGamesRequest.pagination:type_name -> game.Pagination
	21, // 1: game.GetAllUserPreviousGamesByGameTypeRequest.pagination:type_name -> game.Pagination
	13, // 2: game.PreviousGames.game:type_name -> game.Game
	22, // 3: game.PreviousGames.division_result:type_name -> game.DivisionResult
	5,  // 4: game.GetAllUserPreviousGamesResponse.previous_games:type_name -> game.PreviousGames
	23, // 5: game.ChangeGameDetailCalculationRequest.game_type:type_name -> game.GameType
	7,  // 6: game.GameTypes.game_types:type_name -> game.GameTypeDetails
	21, // 7: game.GetGamesByCreatorIdRequest.pagination:type_name -> game.Pagination
	23, // 8: game.AddGameRequest.game_type:type_name -> game.GameType
	23, // 9: game.Game.game_type:type_name -> game.GameType
	13, // 10: game.Games.games:type_name -> game.Game
	13, // 11: game.GameAndUserChoice.game:type_name -> game.Game
	24, // 12: game.GameAndUserChoice.division_results:type_name -> game.DivisionResults
	25, // 13: game.GameAndUserChoice.user_choices:type_name -> game.UserChoiceResultFiltered
	15, // 14: game.GameAndUserChoice.division_details:type_name -> game.DivisionDetail
	16, // 15: game.GamesAndUserChoices.games:type_name -> game.GameAndUserChoice
	18, // 16: game.DivisionUpdate.users:type_name -> game.UserPrizeUpdate
	19, // 17: game.UpdateUserGameDivisionPrizeRequest.division_updates:type_name -> game.DivisionUpdate
	26, // 18: game.GameService.GetGameByGameId:input_type -> game.GameId
	12, // 19: game.GameService.AddGame:input_type -> game.AddGameRequest
	27, // 20: game.GameService.GetNextGamesByGameType:input_type -> game.GameTypeRequest
	28, // 21: game.GameService.GetAllNextGames:input_type -> game.Empty
	26, // 22: game.GameService.DeleteGameByGameId:input_type -> game.GameId
	26, // 23: game.GameService.CheckGameExistsByGameId:input_type -> game.GameId
	11, // 24: game.GameService.GetGamesByCreatorId:input_type -> game.GetGamesByCreatorIdRequest
	10, // 25: game.GameService.AddResultByGameId:input_type -> game.AddResultByGameIdRequest
	21, // 26: game.GameService.GetAllPreviousGames:input_type -> game.Pagination
	21, // 27: game.GameService.GetAllGames:input_type -> game.Pagination
	28, // 28: game.GameService.GetAllGameTypes:input_type -> game.Empty
	8,  // 29: game.GameService.ChangeGameDetailCalculation:input_type -> game.ChangeGameDetailCalculationRequest
	3,  // 30: game.GameService.GetAllUserPreviousGames:input_type -> game.GetAllUserPreviousGamesRequest
	4,  // 31: game.GameService.GetAllUserPreviousGamesByGameType:input_type -> game.GetAllUserPreviousGamesByGameTypeRequest
	2,  // 32: game.GameService.GetAllUserChoiceDivisionsByGameId:input_type -> game.GetAllUserChoiceDivisionsByGameIdRequest
	26, // 33: game.GameService.GetAllUsersChoiceDivisionsByGameId:input_type -> game.GameId
	1,  // 34: game.GameService.UpdateGamePrizeByGameId:input_type -> game.UpdateGamePrizeByGameIdRequest
	0,  // 35: game.GameService.GetUserGamesByTimesAndGameTypes:input_type -> game.GetUserGamesByTimesAndGameTypesRequest
	20, // 36: game.GameService.UpdateUserGameDivisionPrize:input_type -> game.UpdateUserGameDivisionPrizeRequest
	13, // 37: game.GameService.GetGameByGameId:output_type -> game.Game
	13, // 38: game.GameService.AddGame:output_type -> game.Game
	14, // 39: game.GameService.GetNextGamesByGameType:output_type -> game.Games
	14, // 40: game.GameService.GetAllNextGames:output_type -> game.Games
	28, // 41: game.GameService.DeleteGameByGameId:output_type -> game.Empty
	28, // 42: game.GameService.CheckGameExistsByGameId:output_type -> game.Empty
	14, // 43: game.GameService.GetGamesByCreatorId:output_type -> game.Games
	24, // 44: game.GameService.AddResultByGameId:output_type -> game.DivisionResults
	14, // 45: game.GameService.GetAllPreviousGames:output_type -> game.Games
	14, // 46: game.GameService.GetAllGames:output_type -> game.Games
	9,  // 47: game.GameService.GetAllGameTypes:output_type -> game.GameTypes
	9,  // 48: game.GameService.ChangeGameDetailCalculation:output_type -> game.GameTypes
	14, // 49: game.GameService.GetAllUserPreviousGames:output_type -> game.Games
	14, // 50: game.GameService.GetAllUserPreviousGamesByGameType:output_type -> game.Games
	24, // 51: game.GameService.GetAllUserChoiceDivisionsByGameId:output_type -> game.DivisionResults
	24, // 52: game.GameService.GetAllUsersChoiceDivisionsByGameId:output_type -> game.DivisionResults
	28, // 53: game.GameService.UpdateGamePrizeByGameId:output_type -> game.Empty
	17, // 54: game.GameService.GetUserGamesByTimesAndGameTypes:output_type -> game.GamesAndUserChoices
	28, // 55: game.GameService.UpdateUserGameDivisionPrize:output_type -> game.Empty
	37, // [37:56] is the sub-list for method output_type
	18, // [18:37] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_proto_protos_game_game_proto_init() }
func file_proto_protos_game_game_proto_init() {
	if File_proto_protos_game_game_proto != nil {
		return
	}
	file_proto_protos_game_common_proto_init()
	file_proto_protos_game_user_proto_init()
	file_proto_protos_game_game_proto_msgTypes[0].OneofWrappers = []any{}
	file_proto_protos_game_game_proto_msgTypes[1].OneofWrappers = []any{}
	file_proto_protos_game_game_proto_msgTypes[8].OneofWrappers = []any{}
	file_proto_protos_game_game_proto_msgTypes[12].OneofWrappers = []any{}
	file_proto_protos_game_game_proto_msgTypes[13].OneofWrappers = []any{}
	file_proto_protos_game_game_proto_msgTypes[14].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_protos_game_game_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_protos_game_game_proto_goTypes,
		DependencyIndexes: file_proto_protos_game_game_proto_depIdxs,
		MessageInfos:      file_proto_protos_game_game_proto_msgTypes,
	}.Build()
	File_proto_protos_game_game_proto = out.File
	file_proto_protos_game_game_proto_rawDesc = nil
	file_proto_protos_game_game_proto_goTypes = nil
	file_proto_protos_game_game_proto_depIdxs = nil
}
