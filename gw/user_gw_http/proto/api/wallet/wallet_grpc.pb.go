// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/protos/wallet/wallet.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WalletService_GetAllCoins_FullMethodName                                     = "/wallet.WalletService/GetAllCoins"
	WalletService_GetCoinById_FullMethodName                                     = "/wallet.WalletService/GetCoinById"
	WalletService_GetCoinBySymbol_FullMethodName                                 = "/wallet.WalletService/GetCoinBySymbol"
	WalletService_CreateWallet_FullMethodName                                    = "/wallet.WalletService/CreateWallet"
	WalletService_GetBalanceByCoinIdAndUserId_FullMethodName                     = "/wallet.WalletService/GetBalanceByCoinIdAndUserId"
	WalletService_GetWalletsByUserId_FullMethodName                              = "/wallet.WalletService/GetWalletsByUserId"
	WalletService_GetWalletByAddress_FullMethodName                              = "/wallet.WalletService/GetWalletByAddress"
	WalletService_GetWalletBySid_FullMethodName                                  = "/wallet.WalletService/GetWalletBySid"
	WalletService_GetWalletByWalletId_FullMethodName                             = "/wallet.WalletService/GetWalletByWalletId"
	WalletService_UpdateBalance_FullMethodName                                   = "/wallet.WalletService/UpdateBalance"
	WalletService_DeleteWalletByWalletId_FullMethodName                          = "/wallet.WalletService/DeleteWalletByWalletId"
	WalletService_DeleteWalletsByUserId_FullMethodName                           = "/wallet.WalletService/DeleteWalletsByUserId"
	WalletService_CheckTransactionExists_FullMethodName                          = "/wallet.WalletService/CheckTransactionExists"
	WalletService_GetTransactionByTxId_FullMethodName                            = "/wallet.WalletService/GetTransactionByTxId"
	WalletService_GetTransactionsByWalletId_FullMethodName                       = "/wallet.WalletService/GetTransactionsByWalletId"
	WalletService_AddTransaction_FullMethodName                                  = "/wallet.WalletService/AddTransaction"
	WalletService_GetTransactionsByUserId_FullMethodName                         = "/wallet.WalletService/GetTransactionsByUserId"
	WalletService_GetWalletsByUserIdsAndCoinId_FullMethodName                    = "/wallet.WalletService/GetWalletsByUserIdsAndCoinId"
	WalletService_GetPreTransactionDetail_FullMethodName                         = "/wallet.WalletService/GetPreTransactionDetail"
	WalletService_GetTransactionsByWalletIdAndUserIdAndPagination_FullMethodName = "/wallet.WalletService/getTransactionsByWalletIdAndUserIdAndPagination"
	WalletService_GetTransactionsByUserIdAndPagination_FullMethodName            = "/wallet.WalletService/getTransactionsByUserIdAndPagination"
)

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletServiceClient interface {
	GetAllCoins(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Coins, error)
	GetCoinById(ctx context.Context, in *CoinId, opts ...grpc.CallOption) (*Coin, error)
	GetCoinBySymbol(ctx context.Context, in *CoinSymbol, opts ...grpc.CallOption) (*Coin, error)
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*Wallet, error)
	GetBalanceByCoinIdAndUserId(ctx context.Context, in *GetWalletByCoinIdAndUserIdRequest, opts ...grpc.CallOption) (*Balance, error)
	GetWalletsByUserId(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Wallets, error)
	GetWalletByAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Wallet, error)
	GetWalletBySid(ctx context.Context, in *Sid, opts ...grpc.CallOption) (*Wallet, error)
	GetWalletByWalletId(ctx context.Context, in *WalletId, opts ...grpc.CallOption) (*Wallet, error)
	UpdateBalance(ctx context.Context, in *WalletId, opts ...grpc.CallOption) (*Wallet, error)
	DeleteWalletByWalletId(ctx context.Context, in *WalletId, opts ...grpc.CallOption) (*Empty, error)
	DeleteWalletsByUserId(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Empty, error)
	CheckTransactionExists(ctx context.Context, in *TransactionId, opts ...grpc.CallOption) (*BooleanResult, error)
	GetTransactionByTxId(ctx context.Context, in *TransactionId, opts ...grpc.CallOption) (*Transaction, error)
	GetTransactionsByWalletId(ctx context.Context, in *GetTransactionsByWalletIdRequest, opts ...grpc.CallOption) (*Transactions, error)
	AddTransaction(ctx context.Context, in *AddTransactionRequest, opts ...grpc.CallOption) (*Transaction, error)
	GetTransactionsByUserId(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Transactions, error)
	GetWalletsByUserIdsAndCoinId(ctx context.Context, in *GetWalletsByUserIdsAndCoinIdRequest, opts ...grpc.CallOption) (*Wallets, error)
	GetPreTransactionDetail(ctx context.Context, in *AddTransactionRequest, opts ...grpc.CallOption) (*PreTransactionDetail, error)
	GetTransactionsByWalletIdAndUserIdAndPagination(ctx context.Context, in *GetTransactionsByWalletIdAndUserIdAndPaginationRequest, opts ...grpc.CallOption) (*Transactions, error)
	GetTransactionsByUserIdAndPagination(ctx context.Context, in *GetTransactionsByUserIdAndPaginationRequest, opts ...grpc.CallOption) (*Transactions, error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) GetAllCoins(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Coins, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Coins)
	err := c.cc.Invoke(ctx, WalletService_GetAllCoins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetCoinById(ctx context.Context, in *CoinId, opts ...grpc.CallOption) (*Coin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Coin)
	err := c.cc.Invoke(ctx, WalletService_GetCoinById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetCoinBySymbol(ctx context.Context, in *CoinSymbol, opts ...grpc.CallOption) (*Coin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Coin)
	err := c.cc.Invoke(ctx, WalletService_GetCoinBySymbol_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*Wallet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wallet)
	err := c.cc.Invoke(ctx, WalletService_CreateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetBalanceByCoinIdAndUserId(ctx context.Context, in *GetWalletByCoinIdAndUserIdRequest, opts ...grpc.CallOption) (*Balance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Balance)
	err := c.cc.Invoke(ctx, WalletService_GetBalanceByCoinIdAndUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetWalletsByUserId(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Wallets, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wallets)
	err := c.cc.Invoke(ctx, WalletService_GetWalletsByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetWalletByAddress(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Wallet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wallet)
	err := c.cc.Invoke(ctx, WalletService_GetWalletByAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetWalletBySid(ctx context.Context, in *Sid, opts ...grpc.CallOption) (*Wallet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wallet)
	err := c.cc.Invoke(ctx, WalletService_GetWalletBySid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetWalletByWalletId(ctx context.Context, in *WalletId, opts ...grpc.CallOption) (*Wallet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wallet)
	err := c.cc.Invoke(ctx, WalletService_GetWalletByWalletId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) UpdateBalance(ctx context.Context, in *WalletId, opts ...grpc.CallOption) (*Wallet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wallet)
	err := c.cc.Invoke(ctx, WalletService_UpdateBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) DeleteWalletByWalletId(ctx context.Context, in *WalletId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, WalletService_DeleteWalletByWalletId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) DeleteWalletsByUserId(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, WalletService_DeleteWalletsByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CheckTransactionExists(ctx context.Context, in *TransactionId, opts ...grpc.CallOption) (*BooleanResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooleanResult)
	err := c.cc.Invoke(ctx, WalletService_CheckTransactionExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetTransactionByTxId(ctx context.Context, in *TransactionId, opts ...grpc.CallOption) (*Transaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transaction)
	err := c.cc.Invoke(ctx, WalletService_GetTransactionByTxId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetTransactionsByWalletId(ctx context.Context, in *GetTransactionsByWalletIdRequest, opts ...grpc.CallOption) (*Transactions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transactions)
	err := c.cc.Invoke(ctx, WalletService_GetTransactionsByWalletId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) AddTransaction(ctx context.Context, in *AddTransactionRequest, opts ...grpc.CallOption) (*Transaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transaction)
	err := c.cc.Invoke(ctx, WalletService_AddTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetTransactionsByUserId(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Transactions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transactions)
	err := c.cc.Invoke(ctx, WalletService_GetTransactionsByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetWalletsByUserIdsAndCoinId(ctx context.Context, in *GetWalletsByUserIdsAndCoinIdRequest, opts ...grpc.CallOption) (*Wallets, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wallets)
	err := c.cc.Invoke(ctx, WalletService_GetWalletsByUserIdsAndCoinId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetPreTransactionDetail(ctx context.Context, in *AddTransactionRequest, opts ...grpc.CallOption) (*PreTransactionDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreTransactionDetail)
	err := c.cc.Invoke(ctx, WalletService_GetPreTransactionDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetTransactionsByWalletIdAndUserIdAndPagination(ctx context.Context, in *GetTransactionsByWalletIdAndUserIdAndPaginationRequest, opts ...grpc.CallOption) (*Transactions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transactions)
	err := c.cc.Invoke(ctx, WalletService_GetTransactionsByWalletIdAndUserIdAndPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetTransactionsByUserIdAndPagination(ctx context.Context, in *GetTransactionsByUserIdAndPaginationRequest, opts ...grpc.CallOption) (*Transactions, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transactions)
	err := c.cc.Invoke(ctx, WalletService_GetTransactionsByUserIdAndPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServiceServer is the server API for WalletService service.
// All implementations must embed UnimplementedWalletServiceServer
// for forward compatibility.
type WalletServiceServer interface {
	GetAllCoins(context.Context, *Empty) (*Coins, error)
	GetCoinById(context.Context, *CoinId) (*Coin, error)
	GetCoinBySymbol(context.Context, *CoinSymbol) (*Coin, error)
	CreateWallet(context.Context, *CreateWalletRequest) (*Wallet, error)
	GetBalanceByCoinIdAndUserId(context.Context, *GetWalletByCoinIdAndUserIdRequest) (*Balance, error)
	GetWalletsByUserId(context.Context, *UserId) (*Wallets, error)
	GetWalletByAddress(context.Context, *Address) (*Wallet, error)
	GetWalletBySid(context.Context, *Sid) (*Wallet, error)
	GetWalletByWalletId(context.Context, *WalletId) (*Wallet, error)
	UpdateBalance(context.Context, *WalletId) (*Wallet, error)
	DeleteWalletByWalletId(context.Context, *WalletId) (*Empty, error)
	DeleteWalletsByUserId(context.Context, *UserId) (*Empty, error)
	CheckTransactionExists(context.Context, *TransactionId) (*BooleanResult, error)
	GetTransactionByTxId(context.Context, *TransactionId) (*Transaction, error)
	GetTransactionsByWalletId(context.Context, *GetTransactionsByWalletIdRequest) (*Transactions, error)
	AddTransaction(context.Context, *AddTransactionRequest) (*Transaction, error)
	GetTransactionsByUserId(context.Context, *UserId) (*Transactions, error)
	GetWalletsByUserIdsAndCoinId(context.Context, *GetWalletsByUserIdsAndCoinIdRequest) (*Wallets, error)
	GetPreTransactionDetail(context.Context, *AddTransactionRequest) (*PreTransactionDetail, error)
	GetTransactionsByWalletIdAndUserIdAndPagination(context.Context, *GetTransactionsByWalletIdAndUserIdAndPaginationRequest) (*Transactions, error)
	GetTransactionsByUserIdAndPagination(context.Context, *GetTransactionsByUserIdAndPaginationRequest) (*Transactions, error)
	mustEmbedUnimplementedWalletServiceServer()
}

// UnimplementedWalletServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWalletServiceServer struct{}

func (UnimplementedWalletServiceServer) GetAllCoins(context.Context, *Empty) (*Coins, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCoins not implemented")
}
func (UnimplementedWalletServiceServer) GetCoinById(context.Context, *CoinId) (*Coin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinById not implemented")
}
func (UnimplementedWalletServiceServer) GetCoinBySymbol(context.Context, *CoinSymbol) (*Coin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinBySymbol not implemented")
}
func (UnimplementedWalletServiceServer) CreateWallet(context.Context, *CreateWalletRequest) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedWalletServiceServer) GetBalanceByCoinIdAndUserId(context.Context, *GetWalletByCoinIdAndUserIdRequest) (*Balance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceByCoinIdAndUserId not implemented")
}
func (UnimplementedWalletServiceServer) GetWalletsByUserId(context.Context, *UserId) (*Wallets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletsByUserId not implemented")
}
func (UnimplementedWalletServiceServer) GetWalletByAddress(context.Context, *Address) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletByAddress not implemented")
}
func (UnimplementedWalletServiceServer) GetWalletBySid(context.Context, *Sid) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletBySid not implemented")
}
func (UnimplementedWalletServiceServer) GetWalletByWalletId(context.Context, *WalletId) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletByWalletId not implemented")
}
func (UnimplementedWalletServiceServer) UpdateBalance(context.Context, *WalletId) (*Wallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBalance not implemented")
}
func (UnimplementedWalletServiceServer) DeleteWalletByWalletId(context.Context, *WalletId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWalletByWalletId not implemented")
}
func (UnimplementedWalletServiceServer) DeleteWalletsByUserId(context.Context, *UserId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWalletsByUserId not implemented")
}
func (UnimplementedWalletServiceServer) CheckTransactionExists(context.Context, *TransactionId) (*BooleanResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTransactionExists not implemented")
}
func (UnimplementedWalletServiceServer) GetTransactionByTxId(context.Context, *TransactionId) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByTxId not implemented")
}
func (UnimplementedWalletServiceServer) GetTransactionsByWalletId(context.Context, *GetTransactionsByWalletIdRequest) (*Transactions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsByWalletId not implemented")
}
func (UnimplementedWalletServiceServer) AddTransaction(context.Context, *AddTransactionRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTransaction not implemented")
}
func (UnimplementedWalletServiceServer) GetTransactionsByUserId(context.Context, *UserId) (*Transactions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsByUserId not implemented")
}
func (UnimplementedWalletServiceServer) GetWalletsByUserIdsAndCoinId(context.Context, *GetWalletsByUserIdsAndCoinIdRequest) (*Wallets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletsByUserIdsAndCoinId not implemented")
}
func (UnimplementedWalletServiceServer) GetPreTransactionDetail(context.Context, *AddTransactionRequest) (*PreTransactionDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreTransactionDetail not implemented")
}
func (UnimplementedWalletServiceServer) GetTransactionsByWalletIdAndUserIdAndPagination(context.Context, *GetTransactionsByWalletIdAndUserIdAndPaginationRequest) (*Transactions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsByWalletIdAndUserIdAndPagination not implemented")
}
func (UnimplementedWalletServiceServer) GetTransactionsByUserIdAndPagination(context.Context, *GetTransactionsByUserIdAndPaginationRequest) (*Transactions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsByUserIdAndPagination not implemented")
}
func (UnimplementedWalletServiceServer) mustEmbedUnimplementedWalletServiceServer() {}
func (UnimplementedWalletServiceServer) testEmbeddedByValue()                       {}

// UnsafeWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServiceServer will
// result in compilation errors.
type UnsafeWalletServiceServer interface {
	mustEmbedUnimplementedWalletServiceServer()
}

func RegisterWalletServiceServer(s grpc.ServiceRegistrar, srv WalletServiceServer) {
	// If the following call pancis, it indicates UnimplementedWalletServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WalletService_ServiceDesc, srv)
}

func _WalletService_GetAllCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetAllCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetAllCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetAllCoins(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetCoinById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetCoinById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetCoinById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetCoinById(ctx, req.(*CoinId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetCoinBySymbol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinSymbol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetCoinBySymbol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetCoinBySymbol_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetCoinBySymbol(ctx, req.(*CoinSymbol))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetBalanceByCoinIdAndUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletByCoinIdAndUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetBalanceByCoinIdAndUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetBalanceByCoinIdAndUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetBalanceByCoinIdAndUserId(ctx, req.(*GetWalletByCoinIdAndUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetWalletsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetWalletsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetWalletsByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetWalletsByUserId(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetWalletByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetWalletByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetWalletByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetWalletByAddress(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetWalletBySid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetWalletBySid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetWalletBySid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetWalletBySid(ctx, req.(*Sid))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetWalletByWalletId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetWalletByWalletId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetWalletByWalletId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetWalletByWalletId(ctx, req.(*WalletId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_UpdateBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).UpdateBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_UpdateBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).UpdateBalance(ctx, req.(*WalletId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_DeleteWalletByWalletId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).DeleteWalletByWalletId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_DeleteWalletByWalletId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).DeleteWalletByWalletId(ctx, req.(*WalletId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_DeleteWalletsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).DeleteWalletsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_DeleteWalletsByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).DeleteWalletsByUserId(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CheckTransactionExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CheckTransactionExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_CheckTransactionExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CheckTransactionExists(ctx, req.(*TransactionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetTransactionByTxId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetTransactionByTxId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetTransactionByTxId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetTransactionByTxId(ctx, req.(*TransactionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetTransactionsByWalletId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsByWalletIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetTransactionsByWalletId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetTransactionsByWalletId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetTransactionsByWalletId(ctx, req.(*GetTransactionsByWalletIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_AddTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).AddTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_AddTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).AddTransaction(ctx, req.(*AddTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetTransactionsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetTransactionsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetTransactionsByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetTransactionsByUserId(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetWalletsByUserIdsAndCoinId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletsByUserIdsAndCoinIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetWalletsByUserIdsAndCoinId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetWalletsByUserIdsAndCoinId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetWalletsByUserIdsAndCoinId(ctx, req.(*GetWalletsByUserIdsAndCoinIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetPreTransactionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetPreTransactionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetPreTransactionDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetPreTransactionDetail(ctx, req.(*AddTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetTransactionsByWalletIdAndUserIdAndPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsByWalletIdAndUserIdAndPaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetTransactionsByWalletIdAndUserIdAndPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetTransactionsByWalletIdAndUserIdAndPagination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetTransactionsByWalletIdAndUserIdAndPagination(ctx, req.(*GetTransactionsByWalletIdAndUserIdAndPaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetTransactionsByUserIdAndPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsByUserIdAndPaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetTransactionsByUserIdAndPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetTransactionsByUserIdAndPagination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetTransactionsByUserIdAndPagination(ctx, req.(*GetTransactionsByUserIdAndPaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletService_ServiceDesc is the grpc.ServiceDesc for WalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallet.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllCoins",
			Handler:    _WalletService_GetAllCoins_Handler,
		},
		{
			MethodName: "GetCoinById",
			Handler:    _WalletService_GetCoinById_Handler,
		},
		{
			MethodName: "GetCoinBySymbol",
			Handler:    _WalletService_GetCoinBySymbol_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _WalletService_CreateWallet_Handler,
		},
		{
			MethodName: "GetBalanceByCoinIdAndUserId",
			Handler:    _WalletService_GetBalanceByCoinIdAndUserId_Handler,
		},
		{
			MethodName: "GetWalletsByUserId",
			Handler:    _WalletService_GetWalletsByUserId_Handler,
		},
		{
			MethodName: "GetWalletByAddress",
			Handler:    _WalletService_GetWalletByAddress_Handler,
		},
		{
			MethodName: "GetWalletBySid",
			Handler:    _WalletService_GetWalletBySid_Handler,
		},
		{
			MethodName: "GetWalletByWalletId",
			Handler:    _WalletService_GetWalletByWalletId_Handler,
		},
		{
			MethodName: "UpdateBalance",
			Handler:    _WalletService_UpdateBalance_Handler,
		},
		{
			MethodName: "DeleteWalletByWalletId",
			Handler:    _WalletService_DeleteWalletByWalletId_Handler,
		},
		{
			MethodName: "DeleteWalletsByUserId",
			Handler:    _WalletService_DeleteWalletsByUserId_Handler,
		},
		{
			MethodName: "CheckTransactionExists",
			Handler:    _WalletService_CheckTransactionExists_Handler,
		},
		{
			MethodName: "GetTransactionByTxId",
			Handler:    _WalletService_GetTransactionByTxId_Handler,
		},
		{
			MethodName: "GetTransactionsByWalletId",
			Handler:    _WalletService_GetTransactionsByWalletId_Handler,
		},
		{
			MethodName: "AddTransaction",
			Handler:    _WalletService_AddTransaction_Handler,
		},
		{
			MethodName: "GetTransactionsByUserId",
			Handler:    _WalletService_GetTransactionsByUserId_Handler,
		},
		{
			MethodName: "GetWalletsByUserIdsAndCoinId",
			Handler:    _WalletService_GetWalletsByUserIdsAndCoinId_Handler,
		},
		{
			MethodName: "GetPreTransactionDetail",
			Handler:    _WalletService_GetPreTransactionDetail_Handler,
		},
		{
			MethodName: "getTransactionsByWalletIdAndUserIdAndPagination",
			Handler:    _WalletService_GetTransactionsByWalletIdAndUserIdAndPagination_Handler,
		},
		{
			MethodName: "getTransactionsByUserIdAndPagination",
			Handler:    _WalletService_GetTransactionsByUserIdAndPagination_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/protos/wallet/wallet.proto",
}
