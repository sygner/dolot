// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/protos/profile/profile.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProfileService_AddProfile_FullMethodName              = "/profile.ProfileService/AddProfile"
	ProfileService_GetProfileByUsername_FullMethodName    = "/profile.ProfileService/GetProfileByUsername"
	ProfileService_GetProfileBySid_FullMethodName         = "/profile.ProfileService/GetProfileBySid"
	ProfileService_GetProfileByUserId_FullMethodName      = "/profile.ProfileService/GetProfileByUserId"
	ProfileService_ChangeUserScore_FullMethodName         = "/profile.ProfileService/ChangeUserScore"
	ProfileService_ChangeUserGamesQuantity_FullMethodName = "/profile.ProfileService/ChangeUserGamesQuantity"
	ProfileService_ChangeUserWonGames_FullMethodName      = "/profile.ProfileService/ChangeUserWonGames"
	ProfileService_ChangeUserLostGames_FullMethodName     = "/profile.ProfileService/ChangeUserLostGames"
	ProfileService_ChangeUserRank_FullMethodName          = "/profile.ProfileService/ChangeUserRank"
	ProfileService_ChangeUserImpression_FullMethodName    = "/profile.ProfileService/ChangeUserImpression"
	ProfileService_CheckUsernameExists_FullMethodName     = "/profile.ProfileService/CheckUsernameExists"
	ProfileService_UpdateProfile_FullMethodName           = "/profile.ProfileService/UpdateProfile"
)

// ProfileServiceClient is the client API for ProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileServiceClient interface {
	AddProfile(ctx context.Context, in *AddProfileRequest, opts ...grpc.CallOption) (*Profile, error)
	GetProfileByUsername(ctx context.Context, in *Username, opts ...grpc.CallOption) (*Profile, error)
	GetProfileBySid(ctx context.Context, in *Sid, opts ...grpc.CallOption) (*Profile, error)
	GetProfileByUserId(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Profile, error)
	ChangeUserScore(ctx context.Context, in *ChangeScoreRequest, opts ...grpc.CallOption) (*Empty, error)
	ChangeUserGamesQuantity(ctx context.Context, in *ChangeUserGamesRequest, opts ...grpc.CallOption) (*Empty, error)
	ChangeUserWonGames(ctx context.Context, in *ChangeUserGamesRequest, opts ...grpc.CallOption) (*Empty, error)
	ChangeUserLostGames(ctx context.Context, in *ChangeUserGamesRequest, opts ...grpc.CallOption) (*Empty, error)
	ChangeUserRank(ctx context.Context, in *ChangeUserRankRequest, opts ...grpc.CallOption) (*Empty, error)
	ChangeUserImpression(ctx context.Context, in *ChangeImpressionRequest, opts ...grpc.CallOption) (*Empty, error)
	CheckUsernameExists(ctx context.Context, in *Username, opts ...grpc.CallOption) (*Empty, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*Empty, error)
}

type profileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileServiceClient(cc grpc.ClientConnInterface) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) AddProfile(ctx context.Context, in *AddProfileRequest, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, ProfileService_AddProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetProfileByUsername(ctx context.Context, in *Username, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, ProfileService_GetProfileByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetProfileBySid(ctx context.Context, in *Sid, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, ProfileService_GetProfileBySid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) GetProfileByUserId(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*Profile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Profile)
	err := c.cc.Invoke(ctx, ProfileService_GetProfileByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ChangeUserScore(ctx context.Context, in *ChangeScoreRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProfileService_ChangeUserScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ChangeUserGamesQuantity(ctx context.Context, in *ChangeUserGamesRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProfileService_ChangeUserGamesQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ChangeUserWonGames(ctx context.Context, in *ChangeUserGamesRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProfileService_ChangeUserWonGames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ChangeUserLostGames(ctx context.Context, in *ChangeUserGamesRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProfileService_ChangeUserLostGames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ChangeUserRank(ctx context.Context, in *ChangeUserRankRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProfileService_ChangeUserRank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) ChangeUserImpression(ctx context.Context, in *ChangeImpressionRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProfileService_ChangeUserImpression_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) CheckUsernameExists(ctx context.Context, in *Username, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProfileService_CheckUsernameExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProfileService_UpdateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServiceServer is the server API for ProfileService service.
// All implementations must embed UnimplementedProfileServiceServer
// for forward compatibility.
type ProfileServiceServer interface {
	AddProfile(context.Context, *AddProfileRequest) (*Profile, error)
	GetProfileByUsername(context.Context, *Username) (*Profile, error)
	GetProfileBySid(context.Context, *Sid) (*Profile, error)
	GetProfileByUserId(context.Context, *UserId) (*Profile, error)
	ChangeUserScore(context.Context, *ChangeScoreRequest) (*Empty, error)
	ChangeUserGamesQuantity(context.Context, *ChangeUserGamesRequest) (*Empty, error)
	ChangeUserWonGames(context.Context, *ChangeUserGamesRequest) (*Empty, error)
	ChangeUserLostGames(context.Context, *ChangeUserGamesRequest) (*Empty, error)
	ChangeUserRank(context.Context, *ChangeUserRankRequest) (*Empty, error)
	ChangeUserImpression(context.Context, *ChangeImpressionRequest) (*Empty, error)
	CheckUsernameExists(context.Context, *Username) (*Empty, error)
	UpdateProfile(context.Context, *UpdateProfileRequest) (*Empty, error)
	mustEmbedUnimplementedProfileServiceServer()
}

// UnimplementedProfileServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProfileServiceServer struct{}

func (UnimplementedProfileServiceServer) AddProfile(context.Context, *AddProfileRequest) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProfile not implemented")
}
func (UnimplementedProfileServiceServer) GetProfileByUsername(context.Context, *Username) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileByUsername not implemented")
}
func (UnimplementedProfileServiceServer) GetProfileBySid(context.Context, *Sid) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileBySid not implemented")
}
func (UnimplementedProfileServiceServer) GetProfileByUserId(context.Context, *UserId) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileByUserId not implemented")
}
func (UnimplementedProfileServiceServer) ChangeUserScore(context.Context, *ChangeScoreRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserScore not implemented")
}
func (UnimplementedProfileServiceServer) ChangeUserGamesQuantity(context.Context, *ChangeUserGamesRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserGamesQuantity not implemented")
}
func (UnimplementedProfileServiceServer) ChangeUserWonGames(context.Context, *ChangeUserGamesRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserWonGames not implemented")
}
func (UnimplementedProfileServiceServer) ChangeUserLostGames(context.Context, *ChangeUserGamesRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserLostGames not implemented")
}
func (UnimplementedProfileServiceServer) ChangeUserRank(context.Context, *ChangeUserRankRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserRank not implemented")
}
func (UnimplementedProfileServiceServer) ChangeUserImpression(context.Context, *ChangeImpressionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserImpression not implemented")
}
func (UnimplementedProfileServiceServer) CheckUsernameExists(context.Context, *Username) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUsernameExists not implemented")
}
func (UnimplementedProfileServiceServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedProfileServiceServer) mustEmbedUnimplementedProfileServiceServer() {}
func (UnimplementedProfileServiceServer) testEmbeddedByValue()                        {}

// UnsafeProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileServiceServer will
// result in compilation errors.
type UnsafeProfileServiceServer interface {
	mustEmbedUnimplementedProfileServiceServer()
}

func RegisterProfileServiceServer(s grpc.ServiceRegistrar, srv ProfileServiceServer) {
	// If the following call pancis, it indicates UnimplementedProfileServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProfileService_ServiceDesc, srv)
}

func _ProfileService_AddProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).AddProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_AddProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).AddProfile(ctx, req.(*AddProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetProfileByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetProfileByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetProfileByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetProfileByUsername(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetProfileBySid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetProfileBySid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetProfileBySid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetProfileBySid(ctx, req.(*Sid))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_GetProfileByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).GetProfileByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_GetProfileByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).GetProfileByUserId(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ChangeUserScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).ChangeUserScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_ChangeUserScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).ChangeUserScore(ctx, req.(*ChangeScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ChangeUserGamesQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).ChangeUserGamesQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_ChangeUserGamesQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).ChangeUserGamesQuantity(ctx, req.(*ChangeUserGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ChangeUserWonGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).ChangeUserWonGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_ChangeUserWonGames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).ChangeUserWonGames(ctx, req.(*ChangeUserGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ChangeUserLostGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).ChangeUserLostGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_ChangeUserLostGames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).ChangeUserLostGames(ctx, req.(*ChangeUserGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ChangeUserRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).ChangeUserRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_ChangeUserRank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).ChangeUserRank(ctx, req.(*ChangeUserRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_ChangeUserImpression_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeImpressionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).ChangeUserImpression(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_ChangeUserImpression_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).ChangeUserImpression(ctx, req.(*ChangeImpressionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_CheckUsernameExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).CheckUsernameExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_CheckUsernameExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).CheckUsernameExists(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProfileService_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfileService_ServiceDesc is the grpc.ServiceDesc for ProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "profile.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddProfile",
			Handler:    _ProfileService_AddProfile_Handler,
		},
		{
			MethodName: "GetProfileByUsername",
			Handler:    _ProfileService_GetProfileByUsername_Handler,
		},
		{
			MethodName: "GetProfileBySid",
			Handler:    _ProfileService_GetProfileBySid_Handler,
		},
		{
			MethodName: "GetProfileByUserId",
			Handler:    _ProfileService_GetProfileByUserId_Handler,
		},
		{
			MethodName: "ChangeUserScore",
			Handler:    _ProfileService_ChangeUserScore_Handler,
		},
		{
			MethodName: "ChangeUserGamesQuantity",
			Handler:    _ProfileService_ChangeUserGamesQuantity_Handler,
		},
		{
			MethodName: "ChangeUserWonGames",
			Handler:    _ProfileService_ChangeUserWonGames_Handler,
		},
		{
			MethodName: "ChangeUserLostGames",
			Handler:    _ProfileService_ChangeUserLostGames_Handler,
		},
		{
			MethodName: "ChangeUserRank",
			Handler:    _ProfileService_ChangeUserRank_Handler,
		},
		{
			MethodName: "ChangeUserImpression",
			Handler:    _ProfileService_ChangeUserImpression_Handler,
		},
		{
			MethodName: "CheckUsernameExists",
			Handler:    _ProfileService_CheckUsernameExists_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _ProfileService_UpdateProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/protos/profile/profile.proto",
}
