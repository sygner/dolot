// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.3
// source: proto/protos/ticket/ticket.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (x *GameId) Reset() {
	*x = GameId{}
	mi := &file_proto_protos_ticket_ticket_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameId) ProtoMessage() {}

func (x *GameId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_ticket_ticket_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameId.ProtoReflect.Descriptor instead.
func (*GameId) Descriptor() ([]byte, []int) {
	return file_proto_protos_ticket_ticket_proto_rawDescGZIP(), []int{0}
}

func (x *GameId) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

type GetAllUserTicketsByGameIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	UserId int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetAllUserTicketsByGameIdRequest) Reset() {
	*x = GetAllUserTicketsByGameIdRequest{}
	mi := &file_proto_protos_ticket_ticket_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllUserTicketsByGameIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllUserTicketsByGameIdRequest) ProtoMessage() {}

func (x *GetAllUserTicketsByGameIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_ticket_ticket_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllUserTicketsByGameIdRequest.ProtoReflect.Descriptor instead.
func (*GetAllUserTicketsByGameIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_protos_ticket_ticket_proto_rawDescGZIP(), []int{1}
}

func (x *GetAllUserTicketsByGameIdRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GetAllUserTicketsByGameIdRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type UseTicketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TotalUsingTickets int32  `protobuf:"varint,2,opt,name=total_using_tickets,json=totalUsingTickets,proto3" json:"total_using_tickets,omitempty"`
	GameId            string `protobuf:"bytes,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (x *UseTicketsRequest) Reset() {
	*x = UseTicketsRequest{}
	mi := &file_proto_protos_ticket_ticket_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UseTicketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseTicketsRequest) ProtoMessage() {}

func (x *UseTicketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_ticket_ticket_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseTicketsRequest.ProtoReflect.Descriptor instead.
func (*UseTicketsRequest) Descriptor() ([]byte, []int) {
	return file_proto_protos_ticket_ticket_proto_rawDescGZIP(), []int{2}
}

func (x *UseTicketsRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UseTicketsRequest) GetTotalUsingTickets() int32 {
	if x != nil {
		return x.TotalUsingTickets
	}
	return 0
}

func (x *UseTicketsRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

type UserIdAndPagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32       `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *UserIdAndPagination) Reset() {
	*x = UserIdAndPagination{}
	mi := &file_proto_protos_ticket_ticket_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserIdAndPagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdAndPagination) ProtoMessage() {}

func (x *UserIdAndPagination) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_ticket_ticket_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdAndPagination.ProtoReflect.Descriptor instead.
func (*UserIdAndPagination) Descriptor() ([]byte, []int) {
	return file_proto_protos_ticket_ticket_proto_rawDescGZIP(), []int{3}
}

func (x *UserIdAndPagination) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserIdAndPagination) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type Tickets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tickets []*Ticket `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets,omitempty"`
	Total   *int32    `protobuf:"varint,2,opt,name=total,proto3,oneof" json:"total,omitempty"`
}

func (x *Tickets) Reset() {
	*x = Tickets{}
	mi := &file_proto_protos_ticket_ticket_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tickets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tickets) ProtoMessage() {}

func (x *Tickets) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_ticket_ticket_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tickets.ProtoReflect.Descriptor instead.
func (*Tickets) Descriptor() ([]byte, []int) {
	return file_proto_protos_ticket_ticket_proto_rawDescGZIP(), []int{4}
}

func (x *Tickets) GetTickets() []*Ticket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

func (x *Tickets) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

type SignatureAndUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature string `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	UserId    int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *SignatureAndUserId) Reset() {
	*x = SignatureAndUserId{}
	mi := &file_proto_protos_ticket_ticket_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignatureAndUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureAndUserId) ProtoMessage() {}

func (x *SignatureAndUserId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_ticket_ticket_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureAndUserId.ProtoReflect.Descriptor instead.
func (*SignatureAndUserId) Descriptor() ([]byte, []int) {
	return file_proto_protos_ticket_ticket_proto_rawDescGZIP(), []int{5}
}

func (x *SignatureAndUserId) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *SignatureAndUserId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type TicketIdAndUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TicketId int32 `protobuf:"varint,1,opt,name=ticket_id,json=ticketId,proto3" json:"ticket_id,omitempty"`
	UserId   int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TicketIdAndUserId) Reset() {
	*x = TicketIdAndUserId{}
	mi := &file_proto_protos_ticket_ticket_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TicketIdAndUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TicketIdAndUserId) ProtoMessage() {}

func (x *TicketIdAndUserId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_ticket_ticket_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TicketIdAndUserId.ProtoReflect.Descriptor instead.
func (*TicketIdAndUserId) Descriptor() ([]byte, []int) {
	return file_proto_protos_ticket_ticket_proto_rawDescGZIP(), []int{6}
}

func (x *TicketIdAndUserId) GetTicketId() int32 {
	if x != nil {
		return x.TicketId
	}
	return 0
}

func (x *TicketIdAndUserId) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type Ticket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId     int32   `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Signature  string  `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	TicketType string  `protobuf:"bytes,4,opt,name=ticket_type,json=ticketType,proto3" json:"ticket_type,omitempty"`
	Status     string  `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Used       bool    `protobuf:"varint,6,opt,name=used,proto3" json:"used,omitempty"`
	GameId     *string `protobuf:"bytes,7,opt,name=game_id,json=gameId,proto3,oneof" json:"game_id,omitempty"`
	UsedAt     *string `protobuf:"bytes,8,opt,name=used_at,json=usedAt,proto3,oneof" json:"used_at,omitempty"`
	CreatedAt  string  `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	mi := &file_proto_protos_ticket_ticket_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_ticket_ticket_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_proto_protos_ticket_ticket_proto_rawDescGZIP(), []int{7}
}

func (x *Ticket) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Ticket) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Ticket) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *Ticket) GetTicketType() string {
	if x != nil {
		return x.TicketType
	}
	return ""
}

func (x *Ticket) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Ticket) GetUsed() bool {
	if x != nil {
		return x.Used
	}
	return false
}

func (x *Ticket) GetGameId() string {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return ""
}

func (x *Ticket) GetUsedAt() string {
	if x != nil && x.UsedAt != nil {
		return *x.UsedAt
	}
	return ""
}

func (x *Ticket) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type AddTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int32  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TicketType string `protobuf:"bytes,2,opt,name=ticket_type,json=ticketType,proto3" json:"ticket_type,omitempty"`
	GameId     string `protobuf:"bytes,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
}

func (x *AddTicketRequest) Reset() {
	*x = AddTicketRequest{}
	mi := &file_proto_protos_ticket_ticket_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTicketRequest) ProtoMessage() {}

func (x *AddTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_ticket_ticket_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTicketRequest.ProtoReflect.Descriptor instead.
func (*AddTicketRequest) Descriptor() ([]byte, []int) {
	return file_proto_protos_ticket_ticket_proto_rawDescGZIP(), []int{8}
}

func (x *AddTicketRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AddTicketRequest) GetTicketType() string {
	if x != nil {
		return x.TicketType
	}
	return ""
}

func (x *AddTicketRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

type AddTicketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShouldReturn bool                `protobuf:"varint,1,opt,name=should_return,json=shouldReturn,proto3" json:"should_return,omitempty"`
	Tickets      []*AddTicketRequest `protobuf:"bytes,2,rep,name=tickets,proto3" json:"tickets,omitempty"`
}

func (x *AddTicketsRequest) Reset() {
	*x = AddTicketsRequest{}
	mi := &file_proto_protos_ticket_ticket_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTicketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTicketsRequest) ProtoMessage() {}

func (x *AddTicketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_ticket_ticket_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTicketsRequest.ProtoReflect.Descriptor instead.
func (*AddTicketsRequest) Descriptor() ([]byte, []int) {
	return file_proto_protos_ticket_ticket_proto_rawDescGZIP(), []int{9}
}

func (x *AddTicketsRequest) GetShouldReturn() bool {
	if x != nil {
		return x.ShouldReturn
	}
	return false
}

func (x *AddTicketsRequest) GetTickets() []*AddTicketRequest {
	if x != nil {
		return x.Tickets
	}
	return nil
}

var File_proto_protos_ticket_ticket_proto protoreflect.FileDescriptor

var file_proto_protos_ticket_ticket_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x20, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x21, 0x0a, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22,
	0x54, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x13,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x58, 0x0a, 0x07, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4b, 0x0a, 0x12, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x11, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x8f, 0x02, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x64, 0x12, 0x1c, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x22, 0x65, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x11, 0x41,
	0x64, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x32, 0x0a, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x41, 0x64, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x32, 0xf4, 0x05, 0x0a, 0x0d, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x41,
	0x64, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x4b, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42,
	0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a,
	0x0e, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x49, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x49,
	0x64, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x1b, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41,
	0x6e, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0f, 0x2e, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x42, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x0f, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x41, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x0f, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x19, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x38,
	0x0a, 0x0a, 0x41, 0x64, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x79, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x28, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x38, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x2e, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x1a, 0x0f, 0x2e, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x23, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x0e, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x1a, 0x0d, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_protos_ticket_ticket_proto_rawDescOnce sync.Once
	file_proto_protos_ticket_ticket_proto_rawDescData = file_proto_protos_ticket_ticket_proto_rawDesc
)

func file_proto_protos_ticket_ticket_proto_rawDescGZIP() []byte {
	file_proto_protos_ticket_ticket_proto_rawDescOnce.Do(func() {
		file_proto_protos_ticket_ticket_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_protos_ticket_ticket_proto_rawDescData)
	})
	return file_proto_protos_ticket_ticket_proto_rawDescData
}

var file_proto_protos_ticket_ticket_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_protos_ticket_ticket_proto_goTypes = []any{
	(*GameId)(nil),                           // 0: ticket.GameId
	(*GetAllUserTicketsByGameIdRequest)(nil), // 1: ticket.GetAllUserTicketsByGameIdRequest
	(*UseTicketsRequest)(nil),                // 2: ticket.UseTicketsRequest
	(*UserIdAndPagination)(nil),              // 3: ticket.UserIdAndPagination
	(*Tickets)(nil),                          // 4: ticket.Tickets
	(*SignatureAndUserId)(nil),               // 5: ticket.SignatureAndUserId
	(*TicketIdAndUserId)(nil),                // 6: ticket.TicketIdAndUserId
	(*Ticket)(nil),                           // 7: ticket.Ticket
	(*AddTicketRequest)(nil),                 // 8: ticket.AddTicketRequest
	(*AddTicketsRequest)(nil),                // 9: ticket.AddTicketsRequest
	(*Pagination)(nil),                       // 10: ticket.Pagination
	(*Count)(nil),                            // 11: ticket.Count
}
var file_proto_protos_ticket_ticket_proto_depIdxs = []int32{
	10, // 0: ticket.UserIdAndPagination.pagination:type_name -> ticket.Pagination
	7,  // 1: ticket.Tickets.tickets:type_name -> ticket.Ticket
	8,  // 2: ticket.AddTicketsRequest.tickets:type_name -> ticket.AddTicketRequest
	8,  // 3: ticket.TicketService.AddTicket:input_type -> ticket.AddTicketRequest
	5,  // 4: ticket.TicketService.GetTicketBySignatureAndUserId:input_type -> ticket.SignatureAndUserId
	6,  // 5: ticket.TicketService.GetTicketByUserIdAndTicketId:input_type -> ticket.TicketIdAndUserId
	3,  // 6: ticket.TicketService.GetAllUserTickets:input_type -> ticket.UserIdAndPagination
	3,  // 7: ticket.TicketService.GetUserOpenTickets:input_type -> ticket.UserIdAndPagination
	3,  // 8: ticket.TicketService.GetAllUsedTickets:input_type -> ticket.UserIdAndPagination
	2,  // 9: ticket.TicketService.UseTickets:input_type -> ticket.UseTicketsRequest
	9,  // 10: ticket.TicketService.AddTickets:input_type -> ticket.AddTicketsRequest
	1,  // 11: ticket.TicketService.GetAllUserTicketsByGameId:input_type -> ticket.GetAllUserTicketsByGameIdRequest
	0,  // 12: ticket.TicketService.GetAllTicketsByGameId:input_type -> ticket.GameId
	0,  // 13: ticket.TicketService.GetAllPurchasedTicketsCountByGameId:input_type -> ticket.GameId
	7,  // 14: ticket.TicketService.AddTicket:output_type -> ticket.Ticket
	7,  // 15: ticket.TicketService.GetTicketBySignatureAndUserId:output_type -> ticket.Ticket
	7,  // 16: ticket.TicketService.GetTicketByUserIdAndTicketId:output_type -> ticket.Ticket
	4,  // 17: ticket.TicketService.GetAllUserTickets:output_type -> ticket.Tickets
	4,  // 18: ticket.TicketService.GetUserOpenTickets:output_type -> ticket.Tickets
	4,  // 19: ticket.TicketService.GetAllUsedTickets:output_type -> ticket.Tickets
	4,  // 20: ticket.TicketService.UseTickets:output_type -> ticket.Tickets
	4,  // 21: ticket.TicketService.AddTickets:output_type -> ticket.Tickets
	4,  // 22: ticket.TicketService.GetAllUserTicketsByGameId:output_type -> ticket.Tickets
	4,  // 23: ticket.TicketService.GetAllTicketsByGameId:output_type -> ticket.Tickets
	11, // 24: ticket.TicketService.GetAllPurchasedTicketsCountByGameId:output_type -> ticket.Count
	14, // [14:25] is the sub-list for method output_type
	3,  // [3:14] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_proto_protos_ticket_ticket_proto_init() }
func file_proto_protos_ticket_ticket_proto_init() {
	if File_proto_protos_ticket_ticket_proto != nil {
		return
	}
	file_proto_protos_ticket_common_proto_init()
	file_proto_protos_ticket_ticket_proto_msgTypes[4].OneofWrappers = []any{}
	file_proto_protos_ticket_ticket_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_protos_ticket_ticket_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_protos_ticket_ticket_proto_goTypes,
		DependencyIndexes: file_proto_protos_ticket_ticket_proto_depIdxs,
		MessageInfos:      file_proto_protos_ticket_ticket_proto_msgTypes,
	}.Build()
	File_proto_protos_ticket_ticket_proto = out.File
	file_proto_protos_ticket_ticket_proto_rawDesc = nil
	file_proto_protos_ticket_ticket_proto_goTypes = nil
	file_proto_protos_ticket_ticket_proto_depIdxs = nil
}
