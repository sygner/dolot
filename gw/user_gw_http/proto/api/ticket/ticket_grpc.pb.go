// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/protos/ticket/ticket.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TicketService_AddTicket_FullMethodName                           = "/ticket.TicketService/AddTicket"
	TicketService_GetTicketBySignatureAndUserId_FullMethodName       = "/ticket.TicketService/GetTicketBySignatureAndUserId"
	TicketService_GetTicketByUserIdAndTicketId_FullMethodName        = "/ticket.TicketService/GetTicketByUserIdAndTicketId"
	TicketService_GetAllUserTickets_FullMethodName                   = "/ticket.TicketService/GetAllUserTickets"
	TicketService_GetUserOpenTickets_FullMethodName                  = "/ticket.TicketService/GetUserOpenTickets"
	TicketService_GetAllUsedTickets_FullMethodName                   = "/ticket.TicketService/GetAllUsedTickets"
	TicketService_UseTickets_FullMethodName                          = "/ticket.TicketService/UseTickets"
	TicketService_AddTickets_FullMethodName                          = "/ticket.TicketService/AddTickets"
	TicketService_GetAllUserTicketsByGameId_FullMethodName           = "/ticket.TicketService/GetAllUserTicketsByGameId"
	TicketService_GetAllTicketsByGameId_FullMethodName               = "/ticket.TicketService/GetAllTicketsByGameId"
	TicketService_GetAllPurchasedTicketsCountByGameId_FullMethodName = "/ticket.TicketService/GetAllPurchasedTicketsCountByGameId"
)

// TicketServiceClient is the client API for TicketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketServiceClient interface {
	AddTicket(ctx context.Context, in *AddTicketRequest, opts ...grpc.CallOption) (*Ticket, error)
	GetTicketBySignatureAndUserId(ctx context.Context, in *SignatureAndUserId, opts ...grpc.CallOption) (*Ticket, error)
	GetTicketByUserIdAndTicketId(ctx context.Context, in *TicketIdAndUserId, opts ...grpc.CallOption) (*Ticket, error)
	GetAllUserTickets(ctx context.Context, in *UserIdAndPagination, opts ...grpc.CallOption) (*Tickets, error)
	GetUserOpenTickets(ctx context.Context, in *UserIdAndPagination, opts ...grpc.CallOption) (*Tickets, error)
	GetAllUsedTickets(ctx context.Context, in *UserIdAndPagination, opts ...grpc.CallOption) (*Tickets, error)
	UseTickets(ctx context.Context, in *UseTicketsRequest, opts ...grpc.CallOption) (*Tickets, error)
	AddTickets(ctx context.Context, in *AddTicketsRequest, opts ...grpc.CallOption) (*Tickets, error)
	GetAllUserTicketsByGameId(ctx context.Context, in *GetAllUserTicketsByGameIdRequest, opts ...grpc.CallOption) (*Tickets, error)
	GetAllTicketsByGameId(ctx context.Context, in *GameId, opts ...grpc.CallOption) (*Tickets, error)
	GetAllPurchasedTicketsCountByGameId(ctx context.Context, in *GameId, opts ...grpc.CallOption) (*Count, error)
}

type ticketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketServiceClient(cc grpc.ClientConnInterface) TicketServiceClient {
	return &ticketServiceClient{cc}
}

func (c *ticketServiceClient) AddTicket(ctx context.Context, in *AddTicketRequest, opts ...grpc.CallOption) (*Ticket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ticket)
	err := c.cc.Invoke(ctx, TicketService_AddTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetTicketBySignatureAndUserId(ctx context.Context, in *SignatureAndUserId, opts ...grpc.CallOption) (*Ticket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ticket)
	err := c.cc.Invoke(ctx, TicketService_GetTicketBySignatureAndUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetTicketByUserIdAndTicketId(ctx context.Context, in *TicketIdAndUserId, opts ...grpc.CallOption) (*Ticket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ticket)
	err := c.cc.Invoke(ctx, TicketService_GetTicketByUserIdAndTicketId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetAllUserTickets(ctx context.Context, in *UserIdAndPagination, opts ...grpc.CallOption) (*Tickets, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tickets)
	err := c.cc.Invoke(ctx, TicketService_GetAllUserTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetUserOpenTickets(ctx context.Context, in *UserIdAndPagination, opts ...grpc.CallOption) (*Tickets, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tickets)
	err := c.cc.Invoke(ctx, TicketService_GetUserOpenTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetAllUsedTickets(ctx context.Context, in *UserIdAndPagination, opts ...grpc.CallOption) (*Tickets, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tickets)
	err := c.cc.Invoke(ctx, TicketService_GetAllUsedTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) UseTickets(ctx context.Context, in *UseTicketsRequest, opts ...grpc.CallOption) (*Tickets, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tickets)
	err := c.cc.Invoke(ctx, TicketService_UseTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) AddTickets(ctx context.Context, in *AddTicketsRequest, opts ...grpc.CallOption) (*Tickets, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tickets)
	err := c.cc.Invoke(ctx, TicketService_AddTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetAllUserTicketsByGameId(ctx context.Context, in *GetAllUserTicketsByGameIdRequest, opts ...grpc.CallOption) (*Tickets, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tickets)
	err := c.cc.Invoke(ctx, TicketService_GetAllUserTicketsByGameId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetAllTicketsByGameId(ctx context.Context, in *GameId, opts ...grpc.CallOption) (*Tickets, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tickets)
	err := c.cc.Invoke(ctx, TicketService_GetAllTicketsByGameId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) GetAllPurchasedTicketsCountByGameId(ctx context.Context, in *GameId, opts ...grpc.CallOption) (*Count, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Count)
	err := c.cc.Invoke(ctx, TicketService_GetAllPurchasedTicketsCountByGameId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketServiceServer is the server API for TicketService service.
// All implementations must embed UnimplementedTicketServiceServer
// for forward compatibility.
type TicketServiceServer interface {
	AddTicket(context.Context, *AddTicketRequest) (*Ticket, error)
	GetTicketBySignatureAndUserId(context.Context, *SignatureAndUserId) (*Ticket, error)
	GetTicketByUserIdAndTicketId(context.Context, *TicketIdAndUserId) (*Ticket, error)
	GetAllUserTickets(context.Context, *UserIdAndPagination) (*Tickets, error)
	GetUserOpenTickets(context.Context, *UserIdAndPagination) (*Tickets, error)
	GetAllUsedTickets(context.Context, *UserIdAndPagination) (*Tickets, error)
	UseTickets(context.Context, *UseTicketsRequest) (*Tickets, error)
	AddTickets(context.Context, *AddTicketsRequest) (*Tickets, error)
	GetAllUserTicketsByGameId(context.Context, *GetAllUserTicketsByGameIdRequest) (*Tickets, error)
	GetAllTicketsByGameId(context.Context, *GameId) (*Tickets, error)
	GetAllPurchasedTicketsCountByGameId(context.Context, *GameId) (*Count, error)
	mustEmbedUnimplementedTicketServiceServer()
}

// UnimplementedTicketServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTicketServiceServer struct{}

func (UnimplementedTicketServiceServer) AddTicket(context.Context, *AddTicketRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTicket not implemented")
}
func (UnimplementedTicketServiceServer) GetTicketBySignatureAndUserId(context.Context, *SignatureAndUserId) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketBySignatureAndUserId not implemented")
}
func (UnimplementedTicketServiceServer) GetTicketByUserIdAndTicketId(context.Context, *TicketIdAndUserId) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketByUserIdAndTicketId not implemented")
}
func (UnimplementedTicketServiceServer) GetAllUserTickets(context.Context, *UserIdAndPagination) (*Tickets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserTickets not implemented")
}
func (UnimplementedTicketServiceServer) GetUserOpenTickets(context.Context, *UserIdAndPagination) (*Tickets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOpenTickets not implemented")
}
func (UnimplementedTicketServiceServer) GetAllUsedTickets(context.Context, *UserIdAndPagination) (*Tickets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUsedTickets not implemented")
}
func (UnimplementedTicketServiceServer) UseTickets(context.Context, *UseTicketsRequest) (*Tickets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseTickets not implemented")
}
func (UnimplementedTicketServiceServer) AddTickets(context.Context, *AddTicketsRequest) (*Tickets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTickets not implemented")
}
func (UnimplementedTicketServiceServer) GetAllUserTicketsByGameId(context.Context, *GetAllUserTicketsByGameIdRequest) (*Tickets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserTicketsByGameId not implemented")
}
func (UnimplementedTicketServiceServer) GetAllTicketsByGameId(context.Context, *GameId) (*Tickets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTicketsByGameId not implemented")
}
func (UnimplementedTicketServiceServer) GetAllPurchasedTicketsCountByGameId(context.Context, *GameId) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPurchasedTicketsCountByGameId not implemented")
}
func (UnimplementedTicketServiceServer) mustEmbedUnimplementedTicketServiceServer() {}
func (UnimplementedTicketServiceServer) testEmbeddedByValue()                       {}

// UnsafeTicketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketServiceServer will
// result in compilation errors.
type UnsafeTicketServiceServer interface {
	mustEmbedUnimplementedTicketServiceServer()
}

func RegisterTicketServiceServer(s grpc.ServiceRegistrar, srv TicketServiceServer) {
	// If the following call pancis, it indicates UnimplementedTicketServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TicketService_ServiceDesc, srv)
}

func _TicketService_AddTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).AddTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_AddTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).AddTicket(ctx, req.(*AddTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetTicketBySignatureAndUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignatureAndUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetTicketBySignatureAndUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_GetTicketBySignatureAndUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetTicketBySignatureAndUserId(ctx, req.(*SignatureAndUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetTicketByUserIdAndTicketId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketIdAndUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetTicketByUserIdAndTicketId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_GetTicketByUserIdAndTicketId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetTicketByUserIdAndTicketId(ctx, req.(*TicketIdAndUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetAllUserTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdAndPagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetAllUserTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_GetAllUserTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetAllUserTickets(ctx, req.(*UserIdAndPagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetUserOpenTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdAndPagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetUserOpenTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_GetUserOpenTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetUserOpenTickets(ctx, req.(*UserIdAndPagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetAllUsedTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdAndPagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetAllUsedTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_GetAllUsedTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetAllUsedTickets(ctx, req.(*UserIdAndPagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_UseTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).UseTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_UseTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).UseTickets(ctx, req.(*UseTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_AddTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).AddTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_AddTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).AddTickets(ctx, req.(*AddTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetAllUserTicketsByGameId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserTicketsByGameIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetAllUserTicketsByGameId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_GetAllUserTicketsByGameId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetAllUserTicketsByGameId(ctx, req.(*GetAllUserTicketsByGameIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetAllTicketsByGameId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetAllTicketsByGameId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_GetAllTicketsByGameId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetAllTicketsByGameId(ctx, req.(*GameId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_GetAllPurchasedTicketsCountByGameId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).GetAllPurchasedTicketsCountByGameId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketService_GetAllPurchasedTicketsCountByGameId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).GetAllPurchasedTicketsCountByGameId(ctx, req.(*GameId))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketService_ServiceDesc is the grpc.ServiceDesc for TicketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.TicketService",
	HandlerType: (*TicketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTicket",
			Handler:    _TicketService_AddTicket_Handler,
		},
		{
			MethodName: "GetTicketBySignatureAndUserId",
			Handler:    _TicketService_GetTicketBySignatureAndUserId_Handler,
		},
		{
			MethodName: "GetTicketByUserIdAndTicketId",
			Handler:    _TicketService_GetTicketByUserIdAndTicketId_Handler,
		},
		{
			MethodName: "GetAllUserTickets",
			Handler:    _TicketService_GetAllUserTickets_Handler,
		},
		{
			MethodName: "GetUserOpenTickets",
			Handler:    _TicketService_GetUserOpenTickets_Handler,
		},
		{
			MethodName: "GetAllUsedTickets",
			Handler:    _TicketService_GetAllUsedTickets_Handler,
		},
		{
			MethodName: "UseTickets",
			Handler:    _TicketService_UseTickets_Handler,
		},
		{
			MethodName: "AddTickets",
			Handler:    _TicketService_AddTickets_Handler,
		},
		{
			MethodName: "GetAllUserTicketsByGameId",
			Handler:    _TicketService_GetAllUserTicketsByGameId_Handler,
		},
		{
			MethodName: "GetAllTicketsByGameId",
			Handler:    _TicketService_GetAllTicketsByGameId_Handler,
		},
		{
			MethodName: "GetAllPurchasedTicketsCountByGameId",
			Handler:    _TicketService_GetAllPurchasedTicketsCountByGameId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/protos/ticket/ticket.proto",
}
