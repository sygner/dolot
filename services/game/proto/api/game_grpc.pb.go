// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/protos/game.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GameService_GetGameByGameId_FullMethodName         = "/game.GameService/GetGameByGameId"
	GameService_AddGame_FullMethodName                 = "/game.GameService/AddGame"
	GameService_GetNextGamesByGameType_FullMethodName  = "/game.GameService/GetNextGamesByGameType"
	GameService_GetAllNextGames_FullMethodName         = "/game.GameService/GetAllNextGames"
	GameService_DeleteGameByGameId_FullMethodName      = "/game.GameService/DeleteGameByGameId"
	GameService_CheckGameExistsByGameId_FullMethodName = "/game.GameService/CheckGameExistsByGameId"
	GameService_GetGamesByCreatorId_FullMethodName     = "/game.GameService/GetGamesByCreatorId"
	GameService_AddResultByGameId_FullMethodName       = "/game.GameService/AddResultByGameId"
	GameService_GetAllPreviousGames_FullMethodName     = "/game.GameService/GetAllPreviousGames"
	GameService_GetAllGames_FullMethodName             = "/game.GameService/GetAllGames"
)

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServiceClient interface {
	GetGameByGameId(ctx context.Context, in *GameId, opts ...grpc.CallOption) (*Game, error)
	AddGame(ctx context.Context, in *AddGameRequest, opts ...grpc.CallOption) (*Game, error)
	GetNextGamesByGameType(ctx context.Context, in *GameTypeRequest, opts ...grpc.CallOption) (*Games, error)
	GetAllNextGames(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Games, error)
	DeleteGameByGameId(ctx context.Context, in *GameId, opts ...grpc.CallOption) (*Empty, error)
	CheckGameExistsByGameId(ctx context.Context, in *GameId, opts ...grpc.CallOption) (*Empty, error)
	GetGamesByCreatorId(ctx context.Context, in *GetGamesByCreatorIdRequest, opts ...grpc.CallOption) (*Games, error)
	AddResultByGameId(ctx context.Context, in *AddResultByGameIdRequest, opts ...grpc.CallOption) (*DivisionResults, error)
	GetAllPreviousGames(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Games, error)
	GetAllGames(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Games, error)
}

type gameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServiceClient(cc grpc.ClientConnInterface) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) GetGameByGameId(ctx context.Context, in *GameId, opts ...grpc.CallOption) (*Game, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Game)
	err := c.cc.Invoke(ctx, GameService_GetGameByGameId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) AddGame(ctx context.Context, in *AddGameRequest, opts ...grpc.CallOption) (*Game, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Game)
	err := c.cc.Invoke(ctx, GameService_AddGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetNextGamesByGameType(ctx context.Context, in *GameTypeRequest, opts ...grpc.CallOption) (*Games, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Games)
	err := c.cc.Invoke(ctx, GameService_GetNextGamesByGameType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetAllNextGames(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Games, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Games)
	err := c.cc.Invoke(ctx, GameService_GetAllNextGames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) DeleteGameByGameId(ctx context.Context, in *GameId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GameService_DeleteGameByGameId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) CheckGameExistsByGameId(ctx context.Context, in *GameId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, GameService_CheckGameExistsByGameId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetGamesByCreatorId(ctx context.Context, in *GetGamesByCreatorIdRequest, opts ...grpc.CallOption) (*Games, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Games)
	err := c.cc.Invoke(ctx, GameService_GetGamesByCreatorId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) AddResultByGameId(ctx context.Context, in *AddResultByGameIdRequest, opts ...grpc.CallOption) (*DivisionResults, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DivisionResults)
	err := c.cc.Invoke(ctx, GameService_AddResultByGameId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetAllPreviousGames(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Games, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Games)
	err := c.cc.Invoke(ctx, GameService_GetAllPreviousGames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetAllGames(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Games, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Games)
	err := c.cc.Invoke(ctx, GameService_GetAllGames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServiceServer is the server API for GameService service.
// All implementations must embed UnimplementedGameServiceServer
// for forward compatibility.
type GameServiceServer interface {
	GetGameByGameId(context.Context, *GameId) (*Game, error)
	AddGame(context.Context, *AddGameRequest) (*Game, error)
	GetNextGamesByGameType(context.Context, *GameTypeRequest) (*Games, error)
	GetAllNextGames(context.Context, *Empty) (*Games, error)
	DeleteGameByGameId(context.Context, *GameId) (*Empty, error)
	CheckGameExistsByGameId(context.Context, *GameId) (*Empty, error)
	GetGamesByCreatorId(context.Context, *GetGamesByCreatorIdRequest) (*Games, error)
	AddResultByGameId(context.Context, *AddResultByGameIdRequest) (*DivisionResults, error)
	GetAllPreviousGames(context.Context, *Pagination) (*Games, error)
	GetAllGames(context.Context, *Pagination) (*Games, error)
	mustEmbedUnimplementedGameServiceServer()
}

// UnimplementedGameServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameServiceServer struct{}

func (UnimplementedGameServiceServer) GetGameByGameId(context.Context, *GameId) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameByGameId not implemented")
}
func (UnimplementedGameServiceServer) AddGame(context.Context, *AddGameRequest) (*Game, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGame not implemented")
}
func (UnimplementedGameServiceServer) GetNextGamesByGameType(context.Context, *GameTypeRequest) (*Games, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextGamesByGameType not implemented")
}
func (UnimplementedGameServiceServer) GetAllNextGames(context.Context, *Empty) (*Games, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNextGames not implemented")
}
func (UnimplementedGameServiceServer) DeleteGameByGameId(context.Context, *GameId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGameByGameId not implemented")
}
func (UnimplementedGameServiceServer) CheckGameExistsByGameId(context.Context, *GameId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckGameExistsByGameId not implemented")
}
func (UnimplementedGameServiceServer) GetGamesByCreatorId(context.Context, *GetGamesByCreatorIdRequest) (*Games, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGamesByCreatorId not implemented")
}
func (UnimplementedGameServiceServer) AddResultByGameId(context.Context, *AddResultByGameIdRequest) (*DivisionResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResultByGameId not implemented")
}
func (UnimplementedGameServiceServer) GetAllPreviousGames(context.Context, *Pagination) (*Games, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPreviousGames not implemented")
}
func (UnimplementedGameServiceServer) GetAllGames(context.Context, *Pagination) (*Games, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGames not implemented")
}
func (UnimplementedGameServiceServer) mustEmbedUnimplementedGameServiceServer() {}
func (UnimplementedGameServiceServer) testEmbeddedByValue()                     {}

// UnsafeGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServiceServer will
// result in compilation errors.
type UnsafeGameServiceServer interface {
	mustEmbedUnimplementedGameServiceServer()
}

func RegisterGameServiceServer(s grpc.ServiceRegistrar, srv GameServiceServer) {
	// If the following call pancis, it indicates UnimplementedGameServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameService_ServiceDesc, srv)
}

func _GameService_GetGameByGameId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetGameByGameId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_GetGameByGameId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetGameByGameId(ctx, req.(*GameId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_AddGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).AddGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_AddGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).AddGame(ctx, req.(*AddGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetNextGamesByGameType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetNextGamesByGameType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_GetNextGamesByGameType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetNextGamesByGameType(ctx, req.(*GameTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetAllNextGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetAllNextGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_GetAllNextGames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetAllNextGames(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_DeleteGameByGameId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).DeleteGameByGameId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_DeleteGameByGameId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).DeleteGameByGameId(ctx, req.(*GameId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_CheckGameExistsByGameId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).CheckGameExistsByGameId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_CheckGameExistsByGameId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).CheckGameExistsByGameId(ctx, req.(*GameId))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetGamesByCreatorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGamesByCreatorIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetGamesByCreatorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_GetGamesByCreatorId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetGamesByCreatorId(ctx, req.(*GetGamesByCreatorIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_AddResultByGameId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddResultByGameIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).AddResultByGameId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_AddResultByGameId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).AddResultByGameId(ctx, req.(*AddResultByGameIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetAllPreviousGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetAllPreviousGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_GetAllPreviousGames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetAllPreviousGames(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetAllGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetAllGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameService_GetAllGames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetAllGames(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

// GameService_ServiceDesc is the grpc.ServiceDesc for GameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGameByGameId",
			Handler:    _GameService_GetGameByGameId_Handler,
		},
		{
			MethodName: "AddGame",
			Handler:    _GameService_AddGame_Handler,
		},
		{
			MethodName: "GetNextGamesByGameType",
			Handler:    _GameService_GetNextGamesByGameType_Handler,
		},
		{
			MethodName: "GetAllNextGames",
			Handler:    _GameService_GetAllNextGames_Handler,
		},
		{
			MethodName: "DeleteGameByGameId",
			Handler:    _GameService_DeleteGameByGameId_Handler,
		},
		{
			MethodName: "CheckGameExistsByGameId",
			Handler:    _GameService_CheckGameExistsByGameId_Handler,
		},
		{
			MethodName: "GetGamesByCreatorId",
			Handler:    _GameService_GetGamesByCreatorId_Handler,
		},
		{
			MethodName: "AddResultByGameId",
			Handler:    _GameService_AddResultByGameId_Handler,
		},
		{
			MethodName: "GetAllPreviousGames",
			Handler:    _GameService_GetAllPreviousGames_Handler,
		},
		{
			MethodName: "GetAllGames",
			Handler:    _GameService_GetAllGames_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/protos/game.proto",
}
