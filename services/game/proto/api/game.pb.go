// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: proto/protos/game.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddResultByGameIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId string `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Result string `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *AddResultByGameIdRequest) Reset() {
	*x = AddResultByGameIdRequest{}
	mi := &file_proto_protos_game_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddResultByGameIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddResultByGameIdRequest) ProtoMessage() {}

func (x *AddResultByGameIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddResultByGameIdRequest.ProtoReflect.Descriptor instead.
func (*AddResultByGameIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_proto_rawDescGZIP(), []int{0}
}

func (x *AddResultByGameIdRequest) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *AddResultByGameIdRequest) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type GetGamesByCreatorIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatorId  int32       `protobuf:"varint,1,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetGamesByCreatorIdRequest) Reset() {
	*x = GetGamesByCreatorIdRequest{}
	mi := &file_proto_protos_game_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGamesByCreatorIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGamesByCreatorIdRequest) ProtoMessage() {}

func (x *GetGamesByCreatorIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGamesByCreatorIdRequest.ProtoReflect.Descriptor instead.
func (*GetGamesByCreatorIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_proto_rawDescGZIP(), []int{1}
}

func (x *GetGamesByCreatorIdRequest) GetCreatorId() int32 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *GetGamesByCreatorIdRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GameTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameType GameType `protobuf:"varint,1,opt,name=game_type,json=gameType,proto3,enum=game.GameType" json:"game_type,omitempty"`
	Limit    int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GameTypeRequest) Reset() {
	*x = GameTypeRequest{}
	mi := &file_proto_protos_game_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameTypeRequest) ProtoMessage() {}

func (x *GameTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameTypeRequest.ProtoReflect.Descriptor instead.
func (*GameTypeRequest) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_proto_rawDescGZIP(), []int{2}
}

func (x *GameTypeRequest) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_LOTTO
}

func (x *GameTypeRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type AddGameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Name of the game
	GameType  GameType `protobuf:"varint,2,opt,name=game_type,json=gameType,proto3,enum=game.GameType" json:"game_type,omitempty"`
	StartTime string   `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`  // Start time for the game's drawing window
	EndTime   string   `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`        // End time for the game's drawing window
	CreatorId int32    `protobuf:"varint,5,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"` // End time for the game's drawing window
}

func (x *AddGameRequest) Reset() {
	*x = AddGameRequest{}
	mi := &file_proto_protos_game_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddGameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGameRequest) ProtoMessage() {}

func (x *AddGameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGameRequest.ProtoReflect.Descriptor instead.
func (*AddGameRequest) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_proto_rawDescGZIP(), []int{3}
}

func (x *AddGameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddGameRequest) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_LOTTO
}

func (x *AddGameRequest) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *AddGameRequest) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *AddGameRequest) GetCreatorId() int32 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

// Message for Game
type Game struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                              // Unique identifier for the game
	Name             string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                          // Name of the game
	GameType         GameType `protobuf:"varint,3,opt,name=game_type,json=gameType,proto3,enum=game.GameType" json:"game_type,omitempty"`              // Type of game (using enum)
	NumMainNumbers   int32    `protobuf:"varint,4,opt,name=num_main_numbers,json=numMainNumbers,proto3" json:"num_main_numbers,omitempty"`             // Number of main numbers to pick
	NumBonusNumbers  *int32   `protobuf:"varint,5,opt,name=num_bonus_numbers,json=numBonusNumbers,proto3,oneof" json:"num_bonus_numbers,omitempty"`    // Number of bonus numbers
	MainNumberRange  int32    `protobuf:"varint,6,opt,name=main_number_range,json=mainNumberRange,proto3" json:"main_number_range,omitempty"`          // Range of the main numbers
	BonusNumberRange *int32   `protobuf:"varint,7,opt,name=bonus_number_range,json=bonusNumberRange,proto3,oneof" json:"bonus_number_range,omitempty"` // Range of bonus numbers
	StartTime        string   `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                               // Start time for the game's drawing window
	EndTime          string   `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                     // End time for the game's drawing window
	CreatorId        int32    `protobuf:"varint,10,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`                             // ID of the user/admin who created the game
	Result           *string  `protobuf:"bytes,11,opt,name=result,proto3,oneof" json:"result,omitempty"`                                               // Storing the result as a string
	CreatedAt        string   `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                              // Timestamp when the game was created
}

func (x *Game) Reset() {
	*x = Game{}
	mi := &file_proto_protos_game_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Game) ProtoMessage() {}

func (x *Game) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Game.ProtoReflect.Descriptor instead.
func (*Game) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_proto_rawDescGZIP(), []int{4}
}

func (x *Game) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Game) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Game) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_LOTTO
}

func (x *Game) GetNumMainNumbers() int32 {
	if x != nil {
		return x.NumMainNumbers
	}
	return 0
}

func (x *Game) GetNumBonusNumbers() int32 {
	if x != nil && x.NumBonusNumbers != nil {
		return *x.NumBonusNumbers
	}
	return 0
}

func (x *Game) GetMainNumberRange() int32 {
	if x != nil {
		return x.MainNumberRange
	}
	return 0
}

func (x *Game) GetBonusNumberRange() int32 {
	if x != nil && x.BonusNumberRange != nil {
		return *x.BonusNumberRange
	}
	return 0
}

func (x *Game) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *Game) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *Game) GetCreatorId() int32 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *Game) GetResult() string {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return ""
}

func (x *Game) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type Games struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Games []*Game `protobuf:"bytes,1,rep,name=games,proto3" json:"games,omitempty"`
	Total *int32  `protobuf:"varint,2,opt,name=total,proto3,oneof" json:"total,omitempty"`
}

func (x *Games) Reset() {
	*x = Games{}
	mi := &file_proto_protos_game_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Games) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Games) ProtoMessage() {}

func (x *Games) ProtoReflect() protoreflect.Message {
	mi := &file_proto_protos_game_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Games.ProtoReflect.Descriptor instead.
func (*Games) Descriptor() ([]byte, []int) {
	return file_proto_protos_game_proto_rawDescGZIP(), []int{5}
}

func (x *Games) GetGames() []*Game {
	if x != nil {
		return x.Games
	}
	return nil
}

func (x *Games) GetTotal() int32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

var File_proto_protos_game_proto protoreflect.FileDescriptor

var file_proto_protos_game_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x1a,
	0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x18, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x42, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xaa, 0x01, 0x0a,
	0x0e, 0x41, 0x64, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xde, 0x03, 0x0a, 0x04, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e,
	0x75, 0x6d, 0x4d, 0x61, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a,
	0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x11, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x12, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x10, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4e, 0x0a, 0x05, 0x47, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x05, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x05,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0xaf, 0x04, 0x0a, 0x0b, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x0c, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x1a, 0x0a, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x47, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x47,
	0x61, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15,
	0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x65, 0x78, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x0b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x47,
	0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x0c, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x1a, 0x0b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x34, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x0c, 0x2e, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x1a, 0x0b, 0x2e, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x73, 0x42, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x20, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x11,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x1e, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x42, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x10, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x0b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x10, 0x2e,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x0b, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x42, 0x04, 0x5a, 0x02,
	0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_protos_game_proto_rawDescOnce sync.Once
	file_proto_protos_game_proto_rawDescData = file_proto_protos_game_proto_rawDesc
)

func file_proto_protos_game_proto_rawDescGZIP() []byte {
	file_proto_protos_game_proto_rawDescOnce.Do(func() {
		file_proto_protos_game_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_protos_game_proto_rawDescData)
	})
	return file_proto_protos_game_proto_rawDescData
}

var file_proto_protos_game_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_protos_game_proto_goTypes = []any{
	(*AddResultByGameIdRequest)(nil),   // 0: game.AddResultByGameIdRequest
	(*GetGamesByCreatorIdRequest)(nil), // 1: game.GetGamesByCreatorIdRequest
	(*GameTypeRequest)(nil),            // 2: game.GameTypeRequest
	(*AddGameRequest)(nil),             // 3: game.AddGameRequest
	(*Game)(nil),                       // 4: game.Game
	(*Games)(nil),                      // 5: game.Games
	(*Pagination)(nil),                 // 6: game.Pagination
	(GameType)(0),                      // 7: game.GameType
	(*GameId)(nil),                     // 8: game.GameId
	(*Empty)(nil),                      // 9: game.Empty
	(*DivisionResults)(nil),            // 10: game.DivisionResults
}
var file_proto_protos_game_proto_depIdxs = []int32{
	6,  // 0: game.GetGamesByCreatorIdRequest.pagination:type_name -> game.Pagination
	7,  // 1: game.GameTypeRequest.game_type:type_name -> game.GameType
	7,  // 2: game.AddGameRequest.game_type:type_name -> game.GameType
	7,  // 3: game.Game.game_type:type_name -> game.GameType
	4,  // 4: game.Games.games:type_name -> game.Game
	8,  // 5: game.GameService.GetGameByGameId:input_type -> game.GameId
	3,  // 6: game.GameService.AddGame:input_type -> game.AddGameRequest
	2,  // 7: game.GameService.GetNextGamesByGameType:input_type -> game.GameTypeRequest
	9,  // 8: game.GameService.GetAllNextGames:input_type -> game.Empty
	8,  // 9: game.GameService.DeleteGameByGameId:input_type -> game.GameId
	8,  // 10: game.GameService.CheckGameExistsByGameId:input_type -> game.GameId
	1,  // 11: game.GameService.GetGamesByCreatorId:input_type -> game.GetGamesByCreatorIdRequest
	0,  // 12: game.GameService.AddResultByGameId:input_type -> game.AddResultByGameIdRequest
	6,  // 13: game.GameService.GetAllPreviousGames:input_type -> game.Pagination
	6,  // 14: game.GameService.GetAllGames:input_type -> game.Pagination
	4,  // 15: game.GameService.GetGameByGameId:output_type -> game.Game
	4,  // 16: game.GameService.AddGame:output_type -> game.Game
	5,  // 17: game.GameService.GetNextGamesByGameType:output_type -> game.Games
	5,  // 18: game.GameService.GetAllNextGames:output_type -> game.Games
	9,  // 19: game.GameService.DeleteGameByGameId:output_type -> game.Empty
	9,  // 20: game.GameService.CheckGameExistsByGameId:output_type -> game.Empty
	5,  // 21: game.GameService.GetGamesByCreatorId:output_type -> game.Games
	10, // 22: game.GameService.AddResultByGameId:output_type -> game.DivisionResults
	5,  // 23: game.GameService.GetAllPreviousGames:output_type -> game.Games
	5,  // 24: game.GameService.GetAllGames:output_type -> game.Games
	15, // [15:25] is the sub-list for method output_type
	5,  // [5:15] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_proto_protos_game_proto_init() }
func file_proto_protos_game_proto_init() {
	if File_proto_protos_game_proto != nil {
		return
	}
	file_proto_protos_common_proto_init()
	file_proto_protos_game_proto_msgTypes[4].OneofWrappers = []any{}
	file_proto_protos_game_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_protos_game_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_protos_game_proto_goTypes,
		DependencyIndexes: file_proto_protos_game_proto_depIdxs,
		MessageInfos:      file_proto_protos_game_proto_msgTypes,
	}.Build()
	File_proto_protos_game_proto = out.File
	file_proto_protos_game_proto_rawDesc = nil
	file_proto_protos_game_proto_goTypes = nil
	file_proto_protos_game_proto_depIdxs = nil
}
